openapi: 3.0.1
info:
  title: Explorer API
  version: "1.0"
servers:
- url: https://api.appyway.com/v1/explorer
paths:
  /fetchAuthorityById:
    post:
      tags:
      - Authorities
      summary: Fetch an authority by ID
      description: Returns a specific authority by its ID
      operationId: post-fetchauthoritybyid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchAuthorityByIdQuery'
            example:
              id: string
          text/json:
            schema:
              $ref: '#/components/schemas/FetchAuthorityByIdQuery'
            example:
              id: string
          application/*+json:
            schema:
              $ref: '#/components/schemas/FetchAuthorityByIdQuery'
            example:
              id: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityOkResponse'
              example:
                success: true
                result:
                  entityId: string
                  name: string
                  eTag: string
                  notes:
                  - message: string
                  paymentProviders:
                  - name: string
                    cardPaymentsExternalUrl: string
                    paymentsTelephone: string
                  entityType: 1
                  geometry:
                    type: string
                    crs:
                      type: string
                      properties:
                        name: string
                    geometries:
                    - type: string
                      crs:
                        type: string
                        properties:
                          name: string
                  hasFreeParkingOutsideZone: true
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
              example:
                success: true
                message: string
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /fetchEntitiesByIds:
    post:
      tags:
      - Bulk
      summary: Fetches entities by their IDs
      description: Retrieve a bulk list of entities of different types by their IDs
      operationId: post-fetchentitiesbyids
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchEntitiesByIdsQuery'
            example:
              ids:
              - string
              geometryPreference:
                basemap: 1
                geometryTypes:
                - 1
          text/json:
            schema:
              $ref: '#/components/schemas/FetchEntitiesByIdsQuery'
            example:
              ids:
              - string
              geometryPreference:
                basemap: 1
                geometryTypes:
                - 1
          application/*+json:
            schema:
              $ref: '#/components/schemas/FetchEntitiesByIdsQuery'
            example:
              ids:
              - string
              geometryPreference:
                basemap: 1
                geometryTypes:
                - 1
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapEntitiesResponseOkResponse'
              example:
                success: true
                result:
                  parkingEntities:
                  - entityId: string
                    entityType: 1
                    name: string
                    eTag: string
                    address:
                      street: string
                      city: string
                      country: string
                      postcode: string
                    locationCode: string
                    totalCapacity: 0
                    zoneId: string
                    authorityId: string
                    features:
                      type: string
                      features:
                      - type: string
                        id: string
                        geometry:
                          type: string
                          crs:
                            type: string
                            properties:
                              name: string
                          geometries:
                          - type: string
                            crs:
                              type: string
                              properties:
                                name: string
                        properties:
                          basemap: 1
                      properties: {}
                    paymentMethodIds:
                    - 0
                    operator:
                      name: string
                      cardPaymentsExternalUrl: string
                      paymentsTelephone: string
                      telephone: string
                      website: string
                    onStreetParkingTypeIds:
                    - 1
                    facilityTypeIds:
                    - 0
                    venueId: string
                  zones:
                  - entityId: string
                    name: string
                    eTag: string
                    geometry:
                      type: string
                      crs:
                        type: string
                        properties:
                          name: string
                      geometries:
                      - type: string
                        crs:
                          type: string
                          properties:
                            name: string
                    notes:
                    - message: string
                    authorityId: string
                    zoneType: 1
                    venueId: string
                    entityType: 1
                  authorities:
                  - entityId: string
                    name: string
                    eTag: string
                    notes:
                    - message: string
                    paymentProviders:
                    - name: string
                      cardPaymentsExternalUrl: string
                      paymentsTelephone: string
                    entityType: 1
                    geometry:
                      type: string
                      crs:
                        type: string
                        properties:
                          name: string
                      geometries:
                      - type: string
                        crs:
                          type: string
                          properties:
                            name: string
                    hasFreeParkingOutsideZone: true
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
              example:
                success: true
                message: string
                errors:
                - property: string
                  code: string
                  message: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /fetchEventDatesById:
    post:
      tags:
      - Parking
      summary: Fetch event dates by id
      description: Searches for event dates with the supplied ID.
      operationId: post-fetcheventdatesbyid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchEventDatesByIdQuery'
            example:
              entityId: string
              startDate: 2020-01-20T00:00:00.0000000
              endDate: 2020-01-20T00:00:00.0000000
          text/json:
            schema:
              $ref: '#/components/schemas/FetchEventDatesByIdQuery'
            example:
              entityId: string
              startDate: 2020-01-20T00:00:00.0000000
              endDate: 2020-01-20T00:00:00.0000000
          application/*+json:
            schema:
              $ref: '#/components/schemas/FetchEventDatesByIdQuery'
            example:
              entityId: string
              startDate: 2020-01-20T00:00:00.0000000
              endDate: 2020-01-20T00:00:00.0000000
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingEntityEventDatesResultOkResponse'
              example:
                success: true
                result:
                  entityId: string
                  entityType: 1
                  entityETag: string
                  timeZoneId: string
                  eventDates:
                  - 2020-01-20T00:00:00.0000000
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
              example:
                success: true
                message: string
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /fetchOperatingHoursById:
    post:
      tags:
      - Parking
      summary: Fetch operating hours by id
      description: Searches for operating hours with the supplied ID.
      operationId: post-fetchoperatinghoursbyid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchOperatingHoursByIdQuery'
            example:
              entityId: string
              dates:
              - 2020-01-20T00:00:00.0000000
              includeNotApplicableOperatingHours: true
              includeApplicableOperatingHoursDetail: true
              endDate: 2020-01-20T00:00:00.0000000
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              date: 2020-01-20T00:00:00.0000000
              startDate: 2020-01-20T00:00:00.0000000
          text/json:
            schema:
              $ref: '#/components/schemas/FetchOperatingHoursByIdQuery'
            example:
              entityId: string
              dates:
              - 2020-01-20T00:00:00.0000000
              includeNotApplicableOperatingHours: true
              includeApplicableOperatingHoursDetail: true
              endDate: 2020-01-20T00:00:00.0000000
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              date: 2020-01-20T00:00:00.0000000
              startDate: 2020-01-20T00:00:00.0000000
          application/*+json:
            schema:
              $ref: '#/components/schemas/FetchOperatingHoursByIdQuery'
            example:
              entityId: string
              dates:
              - 2020-01-20T00:00:00.0000000
              includeNotApplicableOperatingHours: true
              includeApplicableOperatingHoursDetail: true
              endDate: 2020-01-20T00:00:00.0000000
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              date: 2020-01-20T00:00:00.0000000
              startDate: 2020-01-20T00:00:00.0000000
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingEntityOperatingHoursResultOkResponse'
              example:
                success: true
                result:
                  entityId: string
                  entityType: 1
                  entityETag: string
                  timeZoneId: string
                  operatingHours:
                  - paymentMethodIds:
                    - 0
                    permittedContext:
                      vehicleTypeId: 0
                      activityTypeId: 0
                      fuelTypeId: 0
                      permits:
                      - permitTypeId: 0
                    openPeriods:
                    - start: 2022-06-27T00:00:00.0000000
                      end: 2022-06-27T00:00:00.0000000
                      isFree: true
                      date: 2020-01-20T00:00:00.0000000
                      status: 1
                  notApplicableOperatingHours:
                  - paymentMethodIds:
                    - 0
                    requirements:
                      vehicleTypeIds:
                      - 0
                      activityTypeIds:
                      - 0
                      fuelTypeIds:
                      - 0
                      permits:
                      - permitTypeId: 0
                    openPeriods:
                    - start: 2022-06-27T00:00:00.0000000
                      end: 2022-06-27T00:00:00.0000000
                      isFree: true
                      date: 2020-01-20T00:00:00.0000000
                      status: 1
                  applicableOperatingHoursDetail:
                  - paymentMethodIds:
                    - 0
                    requirements:
                      vehicleTypeIds:
                      - 0
                      activityTypeIds:
                      - 0
                      fuelTypeIds:
                      - 0
                      permits:
                      - permitTypeId: 0
                    openPeriods:
                    - start: 2022-06-27T00:00:00.0000000
                      end: 2022-06-27T00:00:00.0000000
                      isFree: true
                      date: 2020-01-20T00:00:00.0000000
                      status: 1
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
              example:
                success: true
                message: string
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /fetchOperatingHoursByIds:
    post:
      tags:
      - Parking
      summary: Fetch operating hours by ids
      description: Searches for operating hours with the supplied IDs.
      operationId: post-fetchoperatinghoursbyids
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchOperatingHoursByIdsQuery'
            example:
              ids:
              - string
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              date: 2020-01-20T00:00:00.0000000
              startDate: 2020-01-20T00:00:00.0000000
              endDate: 2020-01-20T00:00:00.0000000
              dates:
              - 2020-01-20T00:00:00.0000000
              includeNotApplicableOperatingHours: true
              includeApplicableOperatingHoursDetail: true
          text/json:
            schema:
              $ref: '#/components/schemas/FetchOperatingHoursByIdsQuery'
            example:
              ids:
              - string
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              date: 2020-01-20T00:00:00.0000000
              startDate: 2020-01-20T00:00:00.0000000
              endDate: 2020-01-20T00:00:00.0000000
              dates:
              - 2020-01-20T00:00:00.0000000
              includeNotApplicableOperatingHours: true
              includeApplicableOperatingHoursDetail: true
          application/*+json:
            schema:
              $ref: '#/components/schemas/FetchOperatingHoursByIdsQuery'
            example:
              ids:
              - string
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              date: 2020-01-20T00:00:00.0000000
              startDate: 2020-01-20T00:00:00.0000000
              endDate: 2020-01-20T00:00:00.0000000
              dates:
              - 2020-01-20T00:00:00.0000000
              includeNotApplicableOperatingHours: true
              includeApplicableOperatingHoursDetail: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingEntityOperatingHoursResultOkResponse'
              example:
                success: true
                result:
                  entityId: string
                  entityType: 1
                  entityETag: string
                  timeZoneId: string
                  operatingHours:
                  - paymentMethodIds:
                    - 0
                    permittedContext:
                      vehicleTypeId: 0
                      activityTypeId: 0
                      fuelTypeId: 0
                      permits:
                      - permitTypeId: 0
                    openPeriods:
                    - start: 2022-06-27T00:00:00.0000000
                      end: 2022-06-27T00:00:00.0000000
                      isFree: true
                      date: 2020-01-20T00:00:00.0000000
                      status: 1
                  notApplicableOperatingHours:
                  - paymentMethodIds:
                    - 0
                    requirements:
                      vehicleTypeIds:
                      - 0
                      activityTypeIds:
                      - 0
                      fuelTypeIds:
                      - 0
                      permits:
                      - permitTypeId: 0
                    openPeriods:
                    - start: 2022-06-27T00:00:00.0000000
                      end: 2022-06-27T00:00:00.0000000
                      isFree: true
                      date: 2020-01-20T00:00:00.0000000
                      status: 1
                  applicableOperatingHoursDetail:
                  - paymentMethodIds:
                    - 0
                    requirements:
                      vehicleTypeIds:
                      - 0
                      activityTypeIds:
                      - 0
                      fuelTypeIds:
                      - 0
                      permits:
                      - permitTypeId: 0
                    openPeriods:
                    - start: 2022-06-27T00:00:00.0000000
                      end: 2022-06-27T00:00:00.0000000
                      isFree: true
                      date: 2020-01-20T00:00:00.0000000
                      status: 1
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /fetchParkingEntityById:
    post:
      tags:
      - Parking
      summary: Fetch a parking Entity by ID
      description: Retrieves a parking entity by its ID
      operationId: post-fetchparkingentitybyid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchParkingEntityByIdQuery'
            example:
              id: string
          text/json:
            schema:
              $ref: '#/components/schemas/FetchParkingEntityByIdQuery'
            example:
              id: string
          application/*+json:
            schema:
              $ref: '#/components/schemas/FetchParkingEntityByIdQuery'
            example:
              id: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingEntityOkResponse'
              example:
                success: true
                result:
                  entityId: string
                  entityType: 1
                  name: string
                  eTag: string
                  address:
                    street: string
                    city: string
                    country: string
                    postcode: string
                  locationCode: string
                  totalCapacity: 0
                  zoneId: string
                  authorityId: string
                  features:
                    type: string
                    features:
                    - type: string
                      id: string
                      geometry:
                        type: string
                        crs:
                          type: string
                          properties:
                            name: string
                        geometries:
                        - type: string
                          crs:
                            type: string
                            properties:
                              name: string
                      properties:
                        basemap: 1
                    properties: {}
                  paymentMethodIds:
                  - 0
                  operator:
                    name: string
                    cardPaymentsExternalUrl: string
                    paymentsTelephone: string
                    telephone: string
                    website: string
                  onStreetParkingTypeIds:
                  - 1
                  facilityTypeIds:
                  - 0
                  venueId: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
              example:
                success: true
                message: string
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /fetchParkingQuoteById:
    post:
      tags:
      - Parking
      summary: Fetch a parking quote by id
      description: "Searches for a parking result with the supplied ID. Result indicates whether parking is allowed at the location.\r\nIf parking is allowed for all or part of the requested window, \r\nthe result contains a list of quotes containing information such as price, payment methods, maximum stay and no return policy."
      operationId: post-fetchparkingquotebyid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchParkingQuoteByIdQuery'
            example:
              startTime: string
              entityId: string
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              duration: 3.17:25:30.5000000
              endTime: string
          text/json:
            schema:
              $ref: '#/components/schemas/FetchParkingQuoteByIdQuery'
            example:
              startTime: string
              entityId: string
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              duration: 3.17:25:30.5000000
              endTime: string
          application/*+json:
            schema:
              $ref: '#/components/schemas/FetchParkingQuoteByIdQuery'
            example:
              startTime: string
              entityId: string
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              duration: 3.17:25:30.5000000
              endTime: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingEntitySearchResultOkResponse'
              example:
                success: true
                result:
                  entityId: string
                  entityType: 1
                  quotes:
                  - cost: 0
                    currency: string
                    minCost: 0
                    minStayUntil: string
                    canExtendUntil: string
                    pricedUntil: string
                    noReturnUntil: string
                    freeUntil: string
                    becomesFreeAt: string
                    isFreeParking: true
                    paymentMethodIds:
                    - 0
                    permittedContext:
                      vehicleTypeId: 0
                      activityTypeId: 0
                      fuelTypeId: 0
                      permits:
                      - permitTypeId: 0
                    rulesApplyUntil: string
                    surcharge:
                      value: 0
                      valueType: 1
                      criteria:
                        vehicleOperatorContext:
                          vehicleTypeId: 0
                          activityTypeId: 0
                          fuelTypeId: 0
                          permits:
                          - permitTypeId: 0
                        maxVehicleManufactureYear: 0
                  distance: 0
                  parkingAllowed: 1
                  entityETag: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
              example:
                success: true
                message: string
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /fetchParkingQuotesByIds:
    post:
      tags:
      - Parking
      summary: Fetch parking quotes by ids
      description: "Searches for a parking result with the supplied IDs. Result indicates whether parking is allowed at the location.\r\nIf parking is allowed for all or part of the requested window, \r\nthe result contains a list of quotes containing information such as price, payment methods, maximum stay and no return policy."
      operationId: post-fetchparkingquotesbyids
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchParkingQuotesByIdsQuery'
            example:
              startTime: string
              duration: 3.17:25:30.5000000
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              ids:
              - string
              endTime: string
          text/json:
            schema:
              $ref: '#/components/schemas/FetchParkingQuotesByIdsQuery'
            example:
              startTime: string
              duration: 3.17:25:30.5000000
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              ids:
              - string
              endTime: string
          application/*+json:
            schema:
              $ref: '#/components/schemas/FetchParkingQuotesByIdsQuery'
            example:
              startTime: string
              duration: 3.17:25:30.5000000
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              ids:
              - string
              endTime: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingQuotesResponseOkResponse'
              example:
                success: true
                result:
                  requestedStartTime: string
                  requestedDuration: 3.17:25:30.5000000
                  parking:
                  - entityId: string
                    entityType: 1
                    quotes:
                    - cost: 0
                      currency: string
                      minCost: 0
                      minStayUntil: string
                      canExtendUntil: string
                      pricedUntil: string
                      noReturnUntil: string
                      freeUntil: string
                      becomesFreeAt: string
                      isFreeParking: true
                      paymentMethodIds:
                      - 0
                      permittedContext:
                        vehicleTypeId: 0
                        activityTypeId: 0
                        fuelTypeId: 0
                        permits:
                        - permitTypeId: 0
                      rulesApplyUntil: string
                      surcharge:
                        value: 0
                        valueType: 1
                        criteria:
                          vehicleOperatorContext:
                            vehicleTypeId: 0
                            activityTypeId: 0
                            fuelTypeId: 0
                            permits:
                            - permitTypeId: 0
                          maxVehicleManufactureYear: 0
                    distance: 0
                    parkingAllowed: 1
                    entityETag: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /fetchPaymentProvidersByParkingEntityId:
    post:
      tags:
      - Parking
      summary: Fetch payment providers by parking entity ID
      description: Returns payment providers for the given parking entity ID
      operationId: post-fetchpaymentprovidersbyparkingentityid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchPaymentProvidersByParkingEntityIdQuery'
            example:
              entityId: string
          text/json:
            schema:
              $ref: '#/components/schemas/FetchPaymentProvidersByParkingEntityIdQuery'
            example:
              entityId: string
          application/*+json:
            schema:
              $ref: '#/components/schemas/FetchPaymentProvidersByParkingEntityIdQuery'
            example:
              entityId: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentProvidersResponseOkResponse'
              example:
                success: true
                result:
                  paymentProviders:
                  - name: string
                    cardPaymentsExternalUrl: string
                    paymentsTelephone: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
              example:
                success: true
                message: string
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /fetchZoneById:
    post:
      tags:
      - Zones
      summary: Fetch a zone by ID
      description: Returns a specific zone by its ID
      operationId: post-fetchzonebyid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchZoneByIdQuery'
            example:
              id: string
          text/json:
            schema:
              $ref: '#/components/schemas/FetchZoneByIdQuery'
            example:
              id: string
          application/*+json:
            schema:
              $ref: '#/components/schemas/FetchZoneByIdQuery'
            example:
              id: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneOkResponse'
              example:
                success: true
                result:
                  entityId: string
                  name: string
                  eTag: string
                  geometry:
                    type: string
                    crs:
                      type: string
                      properties:
                        name: string
                    geometries:
                    - type: string
                      crs:
                        type: string
                        properties:
                          name: string
                  notes:
                  - message: string
                  authorityId: string
                  zoneType: 1
                  venueId: string
                  entityType: 1
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
              example:
                success: true
                message: string
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /fetchZoneDefaultRulesById:
    post:
      tags:
      - Zones
      summary: Fetch zone default rules by id
      description: Returns default rules for parking entities by zone ID.
      operationId: post-fetchzonedefaultrulesbyid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchZoneDefaultRulesByIdQuery'
            example:
              startTime: string
              id: string
              includeNotApplicableTimes: true
              onStreetParkingTypeIds:
              - 1
              endTime: string
          text/json:
            schema:
              $ref: '#/components/schemas/FetchZoneDefaultRulesByIdQuery'
            example:
              startTime: string
              id: string
              includeNotApplicableTimes: true
              onStreetParkingTypeIds:
              - 1
              endTime: string
          application/*+json:
            schema:
              $ref: '#/components/schemas/FetchZoneDefaultRulesByIdQuery'
            example:
              startTime: string
              id: string
              includeNotApplicableTimes: true
              onStreetParkingTypeIds:
              - 1
              endTime: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneDefaultRulesResultOkResponse'
              example:
                success: true
                result:
                  entityId: string
                  entityETag: string
                  defaults:
                  - onStreetParkingTypeId: 1
                    specialRestrictionTypeId: 0
                    applicableTimes:
                    - startTime: string
                      endTime: string
                      maxStay: 0
                    notApplicableTimes:
                    - startTime: string
                      endTime: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
              example:
                success: true
                message: string
                errors:
                - property: string
                  code: string
                  message: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /findAuthorityIdsByViewport:
    post:
      tags:
      - Authorities
      summary: Find authority ids by viewport
      description: Returns the Ids of authorities that are at least partially within the specified GeoJson viewport.
      operationId: post-findauthorityidsbyviewport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindAuthorityIdsByViewportQuery'
            example:
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
          text/json:
            schema:
              $ref: '#/components/schemas/FindAuthorityIdsByViewportQuery'
            example:
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
          application/*+json:
            schema:
              $ref: '#/components/schemas/FindAuthorityIdsByViewportQuery'
            example:
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthoritySearchResponseOkResponse'
              example:
                success: true
                result:
                  authorities:
                  - entityId: string
                    entityETag: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
              example:
                success: true
                message: string
                errors:
                - property: string
                  code: string
                  message: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /findParkingEntitiesByCentreAndViewportSize:
    post:
      tags:
      - Parking
      summary: Find parking entities by centre and viewport size
      description: |-
        This query creates a square viewport with the centre at ViewportCentre and side length of ViewportSize.
        It then returns a list of all the parking entities within the bounds of that polygon, along with their distance from the DistanceCalculationLocation if supplied,
        or the viewport centre if not. Entities are ordered by this distance.
      operationId: post-findparkingentitiesbycentreandviewportsize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindParkingEntitiesByCentreAndViewportSizeQuery'
            example:
              viewportCenter:
                lat: 0
                lng: 0
              viewportSize: 0
              filters:
                excludeEntityTypes:
                - 1
              onStreetParkingTypes:
              - 1
              distanceCalculationLocation:
                lat: 0
                lng: 0
              geometryPreference:
                basemap: 1
                geometryTypes:
                - 1
          text/json:
            schema:
              $ref: '#/components/schemas/FindParkingEntitiesByCentreAndViewportSizeQuery'
            example:
              viewportCenter:
                lat: 0
                lng: 0
              viewportSize: 0
              filters:
                excludeEntityTypes:
                - 1
              onStreetParkingTypes:
              - 1
              distanceCalculationLocation:
                lat: 0
                lng: 0
              geometryPreference:
                basemap: 1
                geometryTypes:
                - 1
          application/*+json:
            schema:
              $ref: '#/components/schemas/FindParkingEntitiesByCentreAndViewportSizeQuery'
            example:
              viewportCenter:
                lat: 0
                lng: 0
              viewportSize: 0
              filters:
                excludeEntityTypes:
                - 1
              onStreetParkingTypes:
              - 1
              distanceCalculationLocation:
                lat: 0
                lng: 0
              geometryPreference:
                basemap: 1
                geometryTypes:
                - 1
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindParkingEntitiesByViewportResponseOkResponse'
              example:
                success: true
                result:
                  entities:
                  - entity:
                      entityId: string
                      entityType: 1
                      name: string
                      eTag: string
                      address:
                        street: string
                        city: string
                        country: string
                        postcode: string
                      locationCode: string
                      totalCapacity: 0
                      zoneId: string
                      authorityId: string
                      features:
                        type: string
                        features:
                        - type: string
                          id: string
                          geometry:
                            type: string
                            crs:
                              type: string
                              properties:
                                name: string
                            geometries:
                            - type: string
                              crs:
                                type: string
                                properties:
                                  name: string
                          properties:
                            basemap: 1
                        properties: {}
                      paymentMethodIds:
                      - 0
                      operator:
                        name: string
                        cardPaymentsExternalUrl: string
                        paymentsTelephone: string
                        telephone: string
                        website: string
                      onStreetParkingTypeIds:
                      - 1
                      facilityTypeIds:
                      - 0
                      venueId: string
                    distance: 0
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
              example:
                success: true
                message: string
                errors:
                - property: string
                  code: string
                  message: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /findParkingEntitiesByViewport:
    post:
      tags:
      - Parking
      summary: Find parking entities by viewport
      description: |-
        This query creates a custom viewport from the supplied GeoJson polygon.
        It then returns a list of all the parking entities within the bounds of that polygon, along with their distance from the DistanceCalculationLocation if supplied,
        or the viewport centre if not. Entities are ordered by this distance.
      operationId: post-findparkingentitiesbyviewport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindParkingEntitiesByViewportQuery'
            example:
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
              onStreetParkingTypes:
              - 1
              filters:
                excludeEntityTypes:
                - 1
              distanceCalculationLocation:
                lat: 0
                lng: 0
              geometryPreference:
                basemap: 1
                geometryTypes:
                - 1
          text/json:
            schema:
              $ref: '#/components/schemas/FindParkingEntitiesByViewportQuery'
            example:
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
              onStreetParkingTypes:
              - 1
              filters:
                excludeEntityTypes:
                - 1
              distanceCalculationLocation:
                lat: 0
                lng: 0
              geometryPreference:
                basemap: 1
                geometryTypes:
                - 1
          application/*+json:
            schema:
              $ref: '#/components/schemas/FindParkingEntitiesByViewportQuery'
            example:
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
              onStreetParkingTypes:
              - 1
              filters:
                excludeEntityTypes:
                - 1
              distanceCalculationLocation:
                lat: 0
                lng: 0
              geometryPreference:
                basemap: 1
                geometryTypes:
                - 1
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindParkingEntitiesByViewportResponseOkResponse'
              example:
                success: true
                result:
                  entities:
                  - entity:
                      entityId: string
                      entityType: 1
                      name: string
                      eTag: string
                      address:
                        street: string
                        city: string
                        country: string
                        postcode: string
                      locationCode: string
                      totalCapacity: 0
                      zoneId: string
                      authorityId: string
                      features:
                        type: string
                        features:
                        - type: string
                          id: string
                          geometry:
                            type: string
                            crs:
                              type: string
                              properties:
                                name: string
                            geometries:
                            - type: string
                              crs:
                                type: string
                                properties:
                                  name: string
                          properties:
                            basemap: 1
                        properties: {}
                      paymentMethodIds:
                      - 0
                      operator:
                        name: string
                        cardPaymentsExternalUrl: string
                        paymentsTelephone: string
                        telephone: string
                        website: string
                      onStreetParkingTypeIds:
                      - 1
                      facilityTypeIds:
                      - 0
                      venueId: string
                    distance: 0
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
              example:
                success: true
                message: string
                errors:
                - property: string
                  code: string
                  message: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /findParkingQuotesByCentreAndViewportSize:
    post:
      tags:
      - Parking
      summary: Find parking quotes by centre and viewport size
      description: "This query creates a square viewport with the centre at ViewportCentre and side length of ViewportSize.\r\nIt then returns a list of search results for all parking entities within the bounds of that polygon.\r\nResults are ordered by proximity to the DistanceCalculationLocation if supplied, or the viewport centre if not.\r\n            \r\nEach result indicates whether parking is allowed at that location. If parking is allowed for all or part of the requested window, \r\nthe result contains a list of quotes containing information such as price, payment methods, maximum stay and no return policy."
      operationId: post-findparkingquotesbycentreandviewportsize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindParkingQuotesByCentreAndViewportSizeQuery'
            example:
              viewportSize: 0
              viewportCenter:
                lat: 0
                lng: 0
              startTime: string
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              filters:
                excludeEntityTypes:
                - 1
                excludePaidParking: true
                excludeFreeParking: true
                excludeNoParking: true
                excludeTruncatedParking: true
                excludeCostGreaterThan: 0
              duration: 3.17:25:30.5000000
              endTime: string
              distanceCalculationLocation:
                lat: 0
                lng: 0
          text/json:
            schema:
              $ref: '#/components/schemas/FindParkingQuotesByCentreAndViewportSizeQuery'
            example:
              viewportSize: 0
              viewportCenter:
                lat: 0
                lng: 0
              startTime: string
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              filters:
                excludeEntityTypes:
                - 1
                excludePaidParking: true
                excludeFreeParking: true
                excludeNoParking: true
                excludeTruncatedParking: true
                excludeCostGreaterThan: 0
              duration: 3.17:25:30.5000000
              endTime: string
              distanceCalculationLocation:
                lat: 0
                lng: 0
          application/*+json:
            schema:
              $ref: '#/components/schemas/FindParkingQuotesByCentreAndViewportSizeQuery'
            example:
              viewportSize: 0
              viewportCenter:
                lat: 0
                lng: 0
              startTime: string
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              filters:
                excludeEntityTypes:
                - 1
                excludePaidParking: true
                excludeFreeParking: true
                excludeNoParking: true
                excludeTruncatedParking: true
                excludeCostGreaterThan: 0
              duration: 3.17:25:30.5000000
              endTime: string
              distanceCalculationLocation:
                lat: 0
                lng: 0
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSearchResponseOkResponse'
              example:
                success: true
                result:
                  requestedStartTime: string
                  requestedDuration: 3.17:25:30.5000000
                  parking:
                  - entityId: string
                    entityType: 1
                    quotes:
                    - cost: 0
                      currency: string
                      minCost: 0
                      minStayUntil: string
                      canExtendUntil: string
                      pricedUntil: string
                      noReturnUntil: string
                      freeUntil: string
                      becomesFreeAt: string
                      isFreeParking: true
                      paymentMethodIds:
                      - 0
                      permittedContext:
                        vehicleTypeId: 0
                        activityTypeId: 0
                        fuelTypeId: 0
                        permits:
                        - permitTypeId: 0
                      rulesApplyUntil: string
                      surcharge:
                        value: 0
                        valueType: 1
                        criteria:
                          vehicleOperatorContext:
                            vehicleTypeId: 0
                            activityTypeId: 0
                            fuelTypeId: 0
                            permits:
                            - permitTypeId: 0
                          maxVehicleManufactureYear: 0
                    distance: 0
                    parkingAllowed: 1
                    entityETag: string
                  generalOnstreetPolicy: 1
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
              example:
                success: true
                message: string
                errors:
                - property: string
                  code: string
                  message: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /findParkingQuotesByViewport:
    post:
      tags:
      - Parking
      summary: Find parking quotes by viewport
      description: "This query creates a custom viewport from the supplied GeoJson polygon.\r\nIt then returns a list of search results for all parking entities within the bounds of that polygon.\r\nResults are ordered by proximity to the DistanceCalculationLocation if supplied, or the viewport centre if not.\r\n            \r\nEach result indicates whether parking is allowed at that location. If parking is allowed for all or part of the requested window, \r\nthe result contains a list of quotes containing information such as price, payment methods, maximum stay and no return policy."
      operationId: post-findparkingquotesbyviewport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindParkingQuotesByViewportQuery'
            example:
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
              startTime: string
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              filters:
                excludeEntityTypes:
                - 1
                excludePaidParking: true
                excludeFreeParking: true
                excludeNoParking: true
                excludeTruncatedParking: true
                excludeCostGreaterThan: 0
              distanceCalculationLocation:
                lat: 0
                lng: 0
              duration: 3.17:25:30.5000000
              endTime: string
          text/json:
            schema:
              $ref: '#/components/schemas/FindParkingQuotesByViewportQuery'
            example:
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
              startTime: string
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              filters:
                excludeEntityTypes:
                - 1
                excludePaidParking: true
                excludeFreeParking: true
                excludeNoParking: true
                excludeTruncatedParking: true
                excludeCostGreaterThan: 0
              distanceCalculationLocation:
                lat: 0
                lng: 0
              duration: 3.17:25:30.5000000
              endTime: string
          application/*+json:
            schema:
              $ref: '#/components/schemas/FindParkingQuotesByViewportQuery'
            example:
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
              startTime: string
              vehicleOperatorContext:
                vehicleTypeId: 0
                activityTypeId: 0
                fuelTypeId: 0
                permits:
                - permitTypeId: 0
              filters:
                excludeEntityTypes:
                - 1
                excludePaidParking: true
                excludeFreeParking: true
                excludeNoParking: true
                excludeTruncatedParking: true
                excludeCostGreaterThan: 0
              distanceCalculationLocation:
                lat: 0
                lng: 0
              duration: 3.17:25:30.5000000
              endTime: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSearchResponseOkResponse'
              example:
                success: true
                result:
                  requestedStartTime: string
                  requestedDuration: 3.17:25:30.5000000
                  parking:
                  - entityId: string
                    entityType: 1
                    quotes:
                    - cost: 0
                      currency: string
                      minCost: 0
                      minStayUntil: string
                      canExtendUntil: string
                      pricedUntil: string
                      noReturnUntil: string
                      freeUntil: string
                      becomesFreeAt: string
                      isFreeParking: true
                      paymentMethodIds:
                      - 0
                      permittedContext:
                        vehicleTypeId: 0
                        activityTypeId: 0
                        fuelTypeId: 0
                        permits:
                        - permitTypeId: 0
                      rulesApplyUntil: string
                      surcharge:
                        value: 0
                        valueType: 1
                        criteria:
                          vehicleOperatorContext:
                            vehicleTypeId: 0
                            activityTypeId: 0
                            fuelTypeId: 0
                            permits:
                            - permitTypeId: 0
                          maxVehicleManufactureYear: 0
                    distance: 0
                    parkingAllowed: 1
                    entityETag: string
                  generalOnstreetPolicy: 1
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
              example:
                success: true
                message: string
                errors:
                - property: string
                  code: string
                  message: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /findSuggestionsByViewport:
    post:
      tags:
      - Suggestions
      summary: Find suggestions by viewport
      description: |-
        Returns information about areas not covered by parking entities. The results are indicative of the probability whether you can or cannot park in that area.
        Attention must be paid to the on-street signage
      operationId: post-findsuggestionsbyviewport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindSuggestionsByViewportQuery'
            example:
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
              basemap: 1
          text/json:
            schema:
              $ref: '#/components/schemas/FindSuggestionsByViewportQuery'
            example:
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
              basemap: 1
          application/*+json:
            schema:
              $ref: '#/components/schemas/FindSuggestionsByViewportQuery'
            example:
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
              basemap: 1
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeometrySuggestionFeatureCollectionOkResponse'
              example:
                success: true
                result:
                  type: string
                  features:
                  - type: string
                    id: string
                    geometry:
                      type: string
                      crs:
                        type: string
                        properties:
                          name: string
                    properties:
                      suggestionType: 1
                      basemapTranslation: 1
                  properties: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
              example:
                success: true
                message: string
                errors:
                - property: string
                  code: string
                  message: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /findZoneDefaultRulesByViewport:
    post:
      tags:
      - Zones
      summary: Find zone default rules by viewport
      description: Returns default rules for parking entities for zones that are at least partially within the specified GeoJson viewport.
      operationId: post-findzonedefaultrulesbyviewport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindZoneDefaultRulesByViewportQuery'
            example:
              startTime: string
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
              distanceCalculationLocation:
                lat: 0
                lng: 0
              includeNotApplicableTimes: true
              endTime: string
              onStreetParkingTypeIds:
              - 1
          text/json:
            schema:
              $ref: '#/components/schemas/FindZoneDefaultRulesByViewportQuery'
            example:
              startTime: string
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
              distanceCalculationLocation:
                lat: 0
                lng: 0
              includeNotApplicableTimes: true
              endTime: string
              onStreetParkingTypeIds:
              - 1
          application/*+json:
            schema:
              $ref: '#/components/schemas/FindZoneDefaultRulesByViewportQuery'
            example:
              startTime: string
              viewport:
                type: string
                crs:
                  type: string
                  properties:
                    name: string
                coordinates:
                - - - 0
              distanceCalculationLocation:
                lat: 0
                lng: 0
              includeNotApplicableTimes: true
              endTime: string
              onStreetParkingTypeIds:
              - 1
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneSearchResponseOkResponse'
              example:
                success: true
                result:
                  zones:
                  - entityId: string
                    entityETag: string
                    defaults:
                    - onStreetParkingTypeId: 1
                      specialRestrictionTypeId: 0
                      applicableTimes:
                      - startTime: string
                        endTime: string
                        maxStay: 0
                      notApplicableTimes:
                      - startTime: string
                        endTime: string
                    distance: 0
                  zoneContainingLocation:
                    entityId: string
                    entityETag: string
                    defaults:
                    - onStreetParkingTypeId: 1
                      specialRestrictionTypeId: 0
                      applicableTimes:
                      - startTime: string
                        endTime: string
                        maxStay: 0
                      notApplicableTimes:
                      - startTime: string
                        endTime: string
                    distance: 0
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
              example:
                success: true
                message: string
                errors:
                - property: string
                  code: string
                  message: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
  /ping:
    get:
      tags:
      - Status
      summary: Ping
      description: Returns Status (pong) of the Explorer API service
      operationId: get-ping
      responses:
        "200":
          description: Success
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
components:
  schemas:
    Address:
      type: object
      properties:
        street:
          type: string
          description: Street address
          nullable: true
        city:
          type: string
          description: Town or city
          nullable: true
        country:
          type: string
          description: Country
          nullable: true
        postcode:
          type: string
          description: Postal code
          nullable: true
      additionalProperties: false
      description: A standard address for an Onstreet bay or Car park
    Authority:
      type: object
      properties:
        entityId:
          type: string
          description: Unique identifier for this entity
          nullable: true
        name:
          type: string
          description: User-readable name for this entity
          nullable: true
        eTag:
          type: string
          description: |-
            ETag for the entity. The ETag is specific to each version of this entity and changes whenever the entity data changes. Clients can
            send the eTags of cached entities to the server when requesting data and the server can return only entities for which the current ETag does
            not match the requested tag - i.e. just those entities that have changed.
          nullable: true
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: Any special notes associated with this authority
          nullable: true
        paymentProviders:
          type: array
          items:
            $ref: '#/components/schemas/PaymentProvider'
          nullable: true
        entityType:
          $ref: '#/components/schemas/MapEntityType'
        geometry:
          $ref: '#/components/schemas/GeometryCollection'
        hasFreeParkingOutsideZone:
          type: boolean
          description: "This flag gives an indication of whether parking is likely to be available outside of designated\r\ncontrolled parking zones. The flag indicates the availability of parking for sections of the kerb where\r\nthis API does NOT return a specific OnStreetParking result. If TRUE, parking is likely to be free and\r\nunrestricted where the Parking Search results do not indicate otherwise. if FALSE, it is likely to be no parking.\r\n            \r\nThis is an indication only, and clients should inform their end users that they should always check local\r\nsignage when parking.\r\n            \r\nIf NULL, it is not known whether parking is available for this authority outside of designated zones.\r\n            \r\nNOTE that inside controlled parking zones, it is likely that parking is not available in areas where no\r\nOnStreetParking result is returned."
          nullable: true
      additionalProperties: false
      description: Defines the area controlled by a particular local authority. Authorities may contain zones and may also contain parking entities directly.
    AuthorityOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/Authority'
      additionalProperties: false
    AuthoritySearchResponse:
      type: object
      properties:
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/AuthoritySearchResult'
          description: List of search results returned in this response
          nullable: true
      additionalProperties: false
      description: Response shape for authority search requests
    AuthoritySearchResponseOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/AuthoritySearchResponse'
      additionalProperties: false
    AuthoritySearchResult:
      type: object
      properties:
        entityId:
          type: string
          description: Entity ID of the authority referred to by this result
          nullable: true
        entityETag:
          type: string
          description: |-
            The Etag of the current latest version of the Authority referred to by this result. This allows
            clients to determine if they have the latest version of the authority in their local cache and only
            request the entity if it is missing.
          nullable: true
      additionalProperties: false
    BadRequestResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        message:
          type: string
          nullable: true
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
          nullable: true
      additionalProperties: false
    BasemapTranslation:
      enum:
      - 1
      - 2
      type: integer
      description: |+
        Enumeration for the different types of base maps

        *OrdnanceSurvey (1) - Ordnance Survey: Realistic mapping
        *OpenStreetMaps (2) - Open street map.
      format: int32
    CarPark:
      type: object
      properties:
        entityId:
          type: string
          description: Unique identifier for this entity
          nullable: true
        name:
          type: string
          description: User-readable name for this entity
          nullable: true
        eTag:
          type: string
          description: |-
            ETag for the entity. The ETag is specific to each version of this entity and changes whenever the entity data changes. Clients can
            send the eTags of cached entities to the server when requesting data and the server can return only entities for which the current ETag does
            not match the requested tag - i.e. just those entities that have changed.
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        locationCode:
          type: string
          description: A unique code for each parking entity assigned by a payment provider and is their identifier for payment purposes
          nullable: true
        totalCapacity:
          type: integer
          description: How many vehicles can be parked at the parking entity. May be approximate (in the case of unmarked bays)
          format: int32
          nullable: true
        zoneId:
          type: string
          description: ID of the zone in which the parking entity resides
          nullable: true
        authorityId:
          type: string
          description: ID of the authority in which the parking entity resides
          nullable: true
        features:
          $ref: '#/components/schemas/GeometryCollectionFeatureInfoFeatureCollection'
        paymentMethodIds:
          type: array
          items:
            type: integer
            format: int32
          description: Payment methods supported at this on-street location.
          nullable: true
        entityType:
          $ref: '#/components/schemas/MapEntityType'
        operator:
          $ref: '#/components/schemas/CarParkOperator'
      additionalProperties: false
      description: Models an off-street parking facility (car park) including surface and multi-storey car parks.
    CarParkOperator:
      type: object
      properties:
        name:
          type: string
          description: Provider name
          nullable: true
        cardPaymentsExternalUrl:
          type: string
          description: URL for taking payments (if online payments are supported)
          nullable: true
        paymentsTelephone:
          type: string
          description: Phone number for taking payments (if pay-by-phone is supported)
          nullable: true
        telephone:
          type: string
          description: Operator phone number
          nullable: true
        website:
          type: string
          description: Operator website
          nullable: true
      additionalProperties: false
      description: Details of the operator for a car park, including telephone numbers and URLs for phone and online payments (if applicable)
    Crs:
      type: object
      properties:
        type:
          type: string
          nullable: true
        properties:
          $ref: '#/components/schemas/CrsProperties'
      additionalProperties: false
    CrsProperties:
      type: object
      properties:
        name:
          type: string
          nullable: true
      additionalProperties: false
    DateTimeRange:
      type: object
      properties:
        start:
          type: string
          description: ISO-8601 date/time pattern, extended as required to accommodate nanoseconds.
          example: 2020-01-20T00:00:00.0000000
        end:
          type: string
          description: ISO-8601 date/time pattern, extended as required to accommodate nanoseconds.
          example: 2020-01-20T00:00:00.0000000
      additionalProperties: false
    Error:
      type: object
      properties:
        property:
          type: string
          nullable: true
        code:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
      additionalProperties: false
    FeatureInfo:
      type: object
      properties:
        basemap:
          $ref: '#/components/schemas/BasemapTranslation'
      additionalProperties: false
      description: Provides information about the geometry contained in the feature
    FetchAllIndicesDefinitionsQuery:
      type: object
      additionalProperties: false
    FetchAuthorityByIdQuery:
      required:
      - id
      type: object
      properties:
        id:
          minLength: 1
          type: string
          description: Identifier of the Authority to fetch
      additionalProperties: false
    FetchCapabilitiesByIdsQuery:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
          description: List of Ids of entities to fetch capabilities for
          nullable: true
      additionalProperties: false
    FetchEntitiesByIdsQuery:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
          description: List of Ids of entities to fetch
          nullable: true
        geometryPreference:
          $ref: '#/components/schemas/GeometryPreference'
      additionalProperties: false
      description: Request allowing a client to fetch a list of entities
    FetchEventDatesByIdQuery:
      type: object
      properties:
        entityId:
          type: string
          description: Identifier of the Parking Entity to fetch
          nullable: true
        startDate:
          type: string
          description: 'Start date for which to retrieve the event dates provided in local format: YYYY-MM-DD (eg: 2021-01-01).'
          example: 2020-01-20T00:00:00.0000000
        endDate:
          type: string
          description: 'End date for which to retrieve the event dates provided in local format: YYYY-MM-DD (eg: 2021-01-03).'
          example: 2020-01-20T00:00:00.0000000
      additionalProperties: false
    FetchOperatingHoursByIdQuery:
      required:
      - entityId
      type: object
      properties:
        entityId:
          minLength: 1
          type: string
          description: Identifier of the Parking Entity to fetch
        vehicleOperatorContext:
          $ref: '#/components/schemas/VehicleOperatorContext'
        date:
          type: string
          description: 'The date for which to retrieve the operating hours provided in local format: YYYY-MM-DD (eg: 2021-01-01).'
          nullable: true
          example: 2020-01-20T00:00:00.0000000
        startDate:
          type: string
          description: |-
            Start date for which to retrieve the operating hours provided in local format: YYYY-MM-DD (eg: 2021-01-01).
            Date takes precedence if set.
          nullable: true
          example: 2020-01-20T00:00:00.0000000
        endDate:
          type: string
          description: |-
            End date for which to retrieve the operating hours provided in local format: YYYY-MM-DD (eg: 2021-01-03).
            Date takes precedence if set.
          nullable: true
          example: 2020-01-20T00:00:00.0000000
        dates:
          type: array
          items:
            type: string
            description: ISO-8601 date pattern
            example: 2020-01-20T00:00:00.0000000
          description: |-
            Dates for which to retrieve the operating hours provided in local format: YYYY-MM-DD (eg: 2021-01-03).
            Date, StartDate and EndDate takes precedence if set.
          nullable: true
        includeNotApplicableOperatingHours:
          type: boolean
          description: Include all operation hours requirements for contexts that do not apply to the driver making the request.
        includeApplicableOperatingHoursDetail:
          type: boolean
          description: Include a detail version of operation hours requirements that apply for the given context.
      additionalProperties: false
    FetchOperatingHoursByIdsQuery:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
          description: List of Ids of entities to fetch
          nullable: true
        vehicleOperatorContext:
          $ref: '#/components/schemas/VehicleOperatorContext'
        date:
          type: string
          description: 'The date for which to retrieve the operating hours provided in local format: YYYY-MM-DD (eg: 2021-01-01).'
          nullable: true
          example: 2020-01-20T00:00:00.0000000
        startDate:
          type: string
          description: |-
            Start date for which to retrieve the operating hours provided in local format: YYYY-MM-DD (eg: 2021-01-01).
            Date takes precedence if set.
          nullable: true
          example: 2020-01-20T00:00:00.0000000
        endDate:
          type: string
          description: |-
            End date for which to retrieve the operating hours provided in local format: YYYY-MM-DD (eg: 2021-01-03).
            Date takes precedence if set.
          nullable: true
          example: 2020-01-20T00:00:00.0000000
        dates:
          type: array
          items:
            type: string
            description: ISO-8601 date pattern
            example: 2020-01-20T00:00:00.0000000
          description: |-
            Dates for which to retrieve the operating hours provided in local format: YYYY-MM-DD (eg: 2021-01-03).
            Date, StartDate and EndDate takes precedence if set.
          nullable: true
        includeNotApplicableOperatingHours:
          type: boolean
          description: Include all operation hours requirements for contexts that do not apply to the driver making the request.
        includeApplicableOperatingHoursDetail:
          type: boolean
          description: Include a detail version of operation hours requirements that apply for the given context.
      additionalProperties: false
    FetchParkingEntityByIdQuery:
      required:
      - id
      type: object
      properties:
        id:
          minLength: 1
          type: string
          description: Identifier of the Parking Entity to fetch
      additionalProperties: false
    FetchParkingQuoteByIdQuery:
      required:
      - entityId
      - startTime
      type: object
      properties:
        entityId:
          minLength: 1
          type: string
          description: Identifier of the Parking Entity to fetch
        startTime:
          minLength: 1
          type: string
          description: |-
            Start of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        endTime:
          type: string
          description: |-
            End of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        duration:
          type: string
          description: Requested duration
          readOnly: true
          example: 3.17:25:30.5000000
        vehicleOperatorContext:
          $ref: '#/components/schemas/VehicleOperatorContext'
      additionalProperties: false
    FetchParkingQuotesByIdsQuery:
      required:
      - startTime
      type: object
      properties:
        startTime:
          minLength: 1
          type: string
          description: |-
            Start of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        ids:
          type: array
          items:
            type: string
          description: List of Ids of entities to fetch
          nullable: true
        endTime:
          type: string
          description: |-
            End of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        duration:
          type: string
          description: Requested duration
          readOnly: true
          example: 3.17:25:30.5000000
        vehicleOperatorContext:
          $ref: '#/components/schemas/VehicleOperatorContext'
      additionalProperties: false
    FetchPaymentProvidersByParkingEntityIdQuery:
      required:
      - entityId
      type: object
      properties:
        entityId:
          minLength: 1
          type: string
          description: Identifier of the Parking Entity to fetch Payment Providers
      additionalProperties: false
    FetchRestrictedPeriodsByIdQuery:
      required:
      - startTime
      type: object
      properties:
        startTime:
          minLength: 1
          type: string
          description: |-
            Start of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        entityId:
          type: string
          description: Identifier of the Parking Entity to fetch
          nullable: true
        endTime:
          type: string
          description: |-
            End of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        duration:
          type: string
          description: Duration in ISO format [-][d'.']hh':'mm':'ss['.'fffffff]
          readOnly: true
          example: 3.17:25:30.5000000
        vehicleOperatorContext:
          $ref: '#/components/schemas/VehicleOperatorContext'
      additionalProperties: false
    FetchZoneByIdQuery:
      required:
      - id
      type: object
      properties:
        id:
          minLength: 1
          type: string
          description: Identifier of the Zone to fetch
      additionalProperties: false
    FetchZoneDefaultRulesByIdQuery:
      required:
      - id
      - startTime
      type: object
      properties:
        id:
          minLength: 1
          type: string
          description: Identifier of the Zone to fetch
        startTime:
          minLength: 1
          type: string
          description: |-
            Start of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        endTime:
          type: string
          description: |-
            End of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        onStreetParkingTypeIds:
          type: array
          items:
            $ref: '#/components/schemas/OnStreetParkingType'
          description: |+
            On-Street Parking types for which to return state. Optional. If omitted, defaults are returned for all the on-street parking types
            in the zone for which they are defined.

            *StandardBay (1) - Standard bay (paid or free)
            *DisabledBay (2) - A bay requiring a disabled badge / permit during restricted hours
            *MotorcycleBay (3) - Designated motorcycle bay
            *ElectricBay (4) - A bay designated for electric vehicles only
            *CarClubBay (5) - A bay designated for Car Club members only during restricted hours
            *CoachBay (6) - A bay with space for a coach
            *LoadingBay (7) - A bay that allows Loading Only during restricted hours
            *TaxiBay (8) - Taxi bay
            *ResidentBay (9) - A bay designated for resident permit holders during restricted hours
            *SpecialBay (10) - A bay with special restrictions, e.g. RNLI, High Court or Ambulance bays
            *SingleYellowLine (11) - Single yellow line
            *DoubleYellowLine (12) - Double yellow line
            *SingleRedLine (13) - Single red line
            *DoubleRedLine (14) - Double red line
            *SingleYellowKerbMark (15) - Single yellow kerb marks
            *DoubleYellowKerbMark (16) - Double yellow kerb marks
            *KeepClearLine (17) - Keep Clear lines
            *DroppedKerbDriveway (18) - A dropped kerb driveway
            *None (-1)
          nullable: true
        includeNotApplicableTimes:
          type: boolean
          description: Include all the time windows for which the zone defaults not applies and intersect with the requested period.
      additionalProperties: false
    FindAuthorityIdsByViewportQuery:
      required:
      - viewport
      type: object
      properties:
        viewport:
          minLength: 1
          type: object
          properties:
            type:
              type: string
              nullable: true
            crs:
              $ref: '#/components/schemas/Crs'
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: number
                    format: double
              nullable: true
          additionalProperties: false
          description: Viewport for the query, expressed as a GeoJson polygon. Required.
      additionalProperties: false
      description: A request to search for zone default information by viewport
    FindParkingEntitiesByCentreAndViewportSizeQuery:
      required:
      - viewportCenter
      - viewportSize
      type: object
      properties:
        viewportSize:
          maximum: 1225
          minimum: 0
          exclusiveMinimum: true
          minLength: 1
          type: integer
          description: Length of one side of the square viewport in meters. Required.
          format: int32
        viewportCenter:
          minLength: 1
          type: object
          properties:
            lat:
              type: number
              description: Latitude
              format: double
            lng:
              type: number
              description: Longitude
              format: double
          additionalProperties: false
          description: Centre point for the query. Required.
        distanceCalculationLocation:
          type: object
          properties:
            lat:
              type: number
              description: Latitude
              format: double
            lng:
              type: number
              description: Longitude
              format: double
          additionalProperties: false
          description: |-
            Custom location within the viewport from which to calculate distances for returned entities. Optional. If omitted, distances will be calculated
            from the centre of the viewport. This field is useful if you want to display or order entities by distance from a given point that is not the centre of your requested viewport.
        geometryPreference:
          $ref: '#/components/schemas/GeometryPreference'
        filters:
          $ref: '#/components/schemas/FindParkingEntitiesByViewportFilters'
        onStreetParkingTypes:
          type: array
          items:
            $ref: '#/components/schemas/OnStreetParkingType'
          description: |+
            If supplied, only on-street parking entities that have the given On-Street Parking types will be included in the response. If null,
            all types will be returned.

            *StandardBay (1) - Standard bay (paid or free)
            *DisabledBay (2) - A bay requiring a disabled badge / permit during restricted hours
            *MotorcycleBay (3) - Designated motorcycle bay
            *ElectricBay (4) - A bay designated for electric vehicles only
            *CarClubBay (5) - A bay designated for Car Club members only during restricted hours
            *CoachBay (6) - A bay with space for a coach
            *LoadingBay (7) - A bay that allows Loading Only during restricted hours
            *TaxiBay (8) - Taxi bay
            *ResidentBay (9) - A bay designated for resident permit holders during restricted hours
            *SpecialBay (10) - A bay with special restrictions, e.g. RNLI, High Court or Ambulance bays
            *SingleYellowLine (11) - Single yellow line
            *DoubleYellowLine (12) - Double yellow line
            *SingleRedLine (13) - Single red line
            *DoubleRedLine (14) - Double red line
            *SingleYellowKerbMark (15) - Single yellow kerb marks
            *DoubleYellowKerbMark (16) - Double yellow kerb marks
            *KeepClearLine (17) - Keep Clear lines
            *DroppedKerbDriveway (18) - A dropped kerb driveway
            *None (-1)
          nullable: true
      additionalProperties: false
      description: |-
        Request for searching for Parking Entities for a square viewport. The viewport is defined by the latitude and longitude of
        the centre point and the length of one side.
    FindParkingEntitiesByViewportFilters:
      type: object
      properties:
        excludeEntityTypes:
          type: array
          items:
            $ref: '#/components/schemas/MapEntityType'
          description: |+
            If supplied, entities that have the given Map Entity types will be excluded from the response. Passing Zone or Authority
            entity types will result in a Bad Request response.

            *OnStreet (1) - An on-street parking area
            *Carpark (2) - An off-street parking facility (car park) including surface and multi-storey car parks.
            *Zone (3) - A zone is an area defined by the local authority that acts as a container for a set of On-Street and Car park entities.
            A zone may define common parking rules that are applicable generally across parts of the kerb (e.g. Single Yellow Lines) and may
            define rules parking entities that can be overridden by individual entities.
            *Authority (4) - Defines the area controlled by a particular local authority. Authorities may contain zones and may also contain parking entities directly.
          nullable: true
      additionalProperties: false
      description: Filters that a caller can apply to limit the results returned when searching for parking entities by viewport
    FindParkingEntitiesByViewportQuery:
      required:
      - viewport
      type: object
      properties:
        viewport:
          minLength: 1
          type: object
          properties:
            type:
              type: string
              nullable: true
            crs:
              $ref: '#/components/schemas/Crs'
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: number
                    format: double
              nullable: true
          additionalProperties: false
          description: Viewport for the query, expressed as a GeoJson polygon. Required.
        distanceCalculationLocation:
          type: object
          properties:
            lat:
              type: number
              description: Latitude
              format: double
            lng:
              type: number
              description: Longitude
              format: double
          additionalProperties: false
          description: |-
            Custom location within the viewport from which to calculate distances for returned entities. Optional. If omitted, distances will be calculated
            from the centre of the viewport. This field is useful if you want to display or order entities by distance from a given point that is not the centre of your requested viewport.
        geometryPreference:
          $ref: '#/components/schemas/GeometryPreference'
        onStreetParkingTypes:
          type: array
          items:
            $ref: '#/components/schemas/OnStreetParkingType'
          description: |+
            If supplied, only on-street parking entities that have the given On-Street Parking types will be included in the response. If null,
            all types will be returned.

            *StandardBay (1) - Standard bay (paid or free)
            *DisabledBay (2) - A bay requiring a disabled badge / permit during restricted hours
            *MotorcycleBay (3) - Designated motorcycle bay
            *ElectricBay (4) - A bay designated for electric vehicles only
            *CarClubBay (5) - A bay designated for Car Club members only during restricted hours
            *CoachBay (6) - A bay with space for a coach
            *LoadingBay (7) - A bay that allows Loading Only during restricted hours
            *TaxiBay (8) - Taxi bay
            *ResidentBay (9) - A bay designated for resident permit holders during restricted hours
            *SpecialBay (10) - A bay with special restrictions, e.g. RNLI, High Court or Ambulance bays
            *SingleYellowLine (11) - Single yellow line
            *DoubleYellowLine (12) - Double yellow line
            *SingleRedLine (13) - Single red line
            *DoubleRedLine (14) - Double red line
            *SingleYellowKerbMark (15) - Single yellow kerb marks
            *DoubleYellowKerbMark (16) - Double yellow kerb marks
            *KeepClearLine (17) - Keep Clear lines
            *DroppedKerbDriveway (18) - A dropped kerb driveway
            *None (-1)
          nullable: true
        filters:
          $ref: '#/components/schemas/FindParkingEntitiesByViewportFilters'
      additionalProperties: false
      description: Request for searching for Parking Entities for a given viewport. The viewport is supplied as a GeoJson polygon.
    FindParkingEntitiesByViewportResponse:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/FindParkingEntitiesByViewportResult'
          description: List of results from the entity search.
          nullable: true
      additionalProperties: false
      description: Response from calls that search for Parking Entities by viewport
    FindParkingEntitiesByViewportResponseOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/FindParkingEntitiesByViewportResponse'
      additionalProperties: false
    FindParkingEntitiesByViewportResult:
      type: object
      properties:
        entity:
          $ref: '#/components/schemas/ParkingEntity'
        distance:
          type: number
          description: How far away the parking entity is, in meters. Distances are relative to the DistanceCalculationLocation if supplied in the query, otherwise they are relative to the centre of the viewport.
          format: double
          nullable: true
      additionalProperties: false
      description: Models a single result from a Search Parking Entities by Viewport call
    FindParkingQuotesByCentreAndViewportSizeQuery:
      required:
      - startTime
      - viewportCenter
      - viewportSize
      type: object
      properties:
        startTime:
          minLength: 1
          type: string
          description: |-
            Start of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        viewportCenter:
          minLength: 1
          type: object
          properties:
            lat:
              type: number
              description: Latitude
              format: double
            lng:
              type: number
              description: Longitude
              format: double
          additionalProperties: false
          description: Centre point for the query. Required.
        viewportSize:
          maximum: 1225
          minLength: 1
          type: integer
          description: Length of one side of the square viewport in meters. Required.
          format: int32
        endTime:
          type: string
          description: |-
            End of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        distanceCalculationLocation:
          type: object
          properties:
            lat:
              type: number
              description: Latitude
              format: double
            lng:
              type: number
              description: Longitude
              format: double
          additionalProperties: false
          description: |-
            Custom location within the viewport from which to calculate distances for returned results. Optional. If omitted, distances will be calculated
            from the centre of the viewport. This field is useful if you want to display or order results by distance from a given point that is not the centre of your requested viewport.
        duration:
          type: string
          description: Requested duration
          readOnly: true
          example: 3.17:25:30.5000000
        vehicleOperatorContext:
          $ref: '#/components/schemas/VehicleOperatorContext'
        filters:
          $ref: '#/components/schemas/FindParkingQuotesByViewportFilters'
      additionalProperties: false
      description: |-
        Request for searching for Parking Quotes for a square viewport. The viewport is defined by the latitude and longitude of
        the centre point and the length of one side.
    FindParkingQuotesByViewportFilters:
      type: object
      properties:
        excludeEntityTypes:
          type: array
          items:
            $ref: '#/components/schemas/MapEntityType'
          description: |+
            If supplied, entities that have the given Map Entity types will be excluded from the response. Passing Zone or Authority
            entity types will result in a Bad Request response.

            *OnStreet (1) - An on-street parking area
            *Carpark (2) - An off-street parking facility (car park) including surface and multi-storey car parks.
            *Zone (3) - A zone is an area defined by the local authority that acts as a container for a set of On-Street and Car park entities.
            A zone may define common parking rules that are applicable generally across parts of the kerb (e.g. Single Yellow Lines) and may
            define rules parking entities that can be overridden by individual entities.
            *Authority (4) - Defines the area controlled by a particular local authority. Authorities may contain zones and may also contain parking entities directly.
          nullable: true
        excludePaidParking:
          type: boolean
          description: TRUE to exclude paid parking bays from the result. Optional. Defaults to FALSE if omitted.
          nullable: true
        excludeFreeParking:
          type: boolean
          description: TRUE to exclude free parking bays from the result. Optional. Defaults to FALSE if omitted.
          nullable: true
        excludeNoParking:
          type: boolean
          description: TRUE to exclude from the result any bays where parking is not allowed for the entirety of the requested time window for the given vehicle operator. Optional. Defaults to FALSE if omitted.
          nullable: true
        excludeTruncatedParking:
          type: boolean
          description: "TRUE to exclude from the result any bays where parking is not allowed for part of the requested time window for the given vehicle operator. Optional. Defaults to FALSE if omitted.\r\n            \r\nNote that this filter does not imply the exclusion of bays where parking is not allowed for the entirety of the requested time window. To exclude such results, use the ExcludeNoParking filter.\r\nif using ExcludeTruncatedParking."
          nullable: true
        excludeCostGreaterThan:
          type: number
          description: "If supplied, bays for which the total cost over the requested duration exceeds the supplied value will not be included in the result.\r\n            \r\nIf the ExcludePaidParking filter is set to TRUE, this property will have no effect."
          format: float
          nullable: true
      additionalProperties: false
      description: Filters that a caller can apply to limit the results returned when searching for parking by viewport
    FindParkingQuotesByViewportQuery:
      required:
      - startTime
      - viewport
      type: object
      properties:
        startTime:
          minLength: 1
          type: string
          description: |-
            Start of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        viewport:
          minLength: 1
          type: object
          properties:
            type:
              type: string
              nullable: true
            crs:
              $ref: '#/components/schemas/Crs'
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: number
                    format: double
              nullable: true
          additionalProperties: false
          description: Viewport for the query, expressed as a GeoJson polygon. Required.
        duration:
          type: string
          description: Requested duration
          readOnly: true
          example: 3.17:25:30.5000000
        endTime:
          type: string
          description: |-
            End of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        distanceCalculationLocation:
          type: object
          properties:
            lat:
              type: number
              description: Latitude
              format: double
            lng:
              type: number
              description: Longitude
              format: double
          additionalProperties: false
          description: |-
            Custom location within the viewport from which to calculate distances for returned results. Optional. If omitted, distances will be calculated
            from the centre of the viewport. This field is useful if you want to display or order results by distance from a given point that is not the centre of your requested viewport.
        vehicleOperatorContext:
          $ref: '#/components/schemas/VehicleOperatorContext'
        filters:
          $ref: '#/components/schemas/FindParkingQuotesByViewportFilters'
      additionalProperties: false
      description: Request for searching for Parking Quotes for a given viewport. The viewport is supplied as a GeoJson polygon.
    FindSuggestionsByViewportQuery:
      required:
      - viewport
      type: object
      properties:
        viewport:
          minLength: 1
          type: object
          properties:
            type:
              type: string
              nullable: true
            crs:
              $ref: '#/components/schemas/Crs'
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: number
                    format: double
              nullable: true
          additionalProperties: false
          description: Viewport for the query, expressed as a GeoJson polygon. Required.
        basemap:
          $ref: '#/components/schemas/BasemapTranslation'
      additionalProperties: false
      description: Request for searching information about areas not covered by parking entities for a given viewport. The viewport is supplied as a GeoJson polygon.
    FindZoneDefaultRulesByViewportQuery:
      required:
      - startTime
      - viewport
      type: object
      properties:
        viewport:
          minLength: 1
          type: object
          properties:
            type:
              type: string
              nullable: true
            crs:
              $ref: '#/components/schemas/Crs'
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: number
                    format: double
              nullable: true
          additionalProperties: false
          description: Viewport for the query, expressed as a GeoJson polygon. Required.
        startTime:
          minLength: 1
          type: string
          description: |-
            Start of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        endTime:
          type: string
          description: |-
            End of the window for which to retrieve state. Required.
            Dates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
        onStreetParkingTypeIds:
          type: array
          items:
            $ref: '#/components/schemas/OnStreetParkingType'
          description: |+
            On Street Parking types for which to return state. Optional. If omitted, defaults are returned for all the on-street parking types
            in the zone for which they are defined.

            *StandardBay (1) - Standard bay (paid or free)
            *DisabledBay (2) - A bay requiring a disabled badge / permit during restricted hours
            *MotorcycleBay (3) - Designated motorcycle bay
            *ElectricBay (4) - A bay designated for electric vehicles only
            *CarClubBay (5) - A bay designated for Car Club members only during restricted hours
            *CoachBay (6) - A bay with space for a coach
            *LoadingBay (7) - A bay that allows Loading Only during restricted hours
            *TaxiBay (8) - Taxi bay
            *ResidentBay (9) - A bay designated for resident permit holders during restricted hours
            *SpecialBay (10) - A bay with special restrictions, e.g. RNLI, High Court or Ambulance bays
            *SingleYellowLine (11) - Single yellow line
            *DoubleYellowLine (12) - Double yellow line
            *SingleRedLine (13) - Single red line
            *DoubleRedLine (14) - Double red line
            *SingleYellowKerbMark (15) - Single yellow kerb marks
            *DoubleYellowKerbMark (16) - Double yellow kerb marks
            *KeepClearLine (17) - Keep Clear lines
            *DroppedKerbDriveway (18) - A dropped kerb driveway
            *None (-1)
          nullable: true
        distanceCalculationLocation:
          type: object
          properties:
            lat:
              type: number
              description: Latitude
              format: double
            lng:
              type: number
              description: Longitude
              format: double
          additionalProperties: false
          description: |-
            Custom location within the viewport from which to calculate distances for returned results. Optional. If omitted, distances will be calculated
            from the centre of the viewport. This field is useful if you want to display or order results by distance from a given point that is not the centre of your requested viewport.
        includeNotApplicableTimes:
          type: boolean
          description: Include all the time windows for which the zone defaults not applies and intersect with the requested period.
      additionalProperties: false
      description: A request to search for zone default information by viewport
    GeneralOnStreetPolicyType:
      enum:
      - 1
      - 2
      - 3
      - 4
      type: integer
      description: |+
        The different policies that may apply to sections of the kerb within a given area where no specific data is present.

        *Restricted (1) - Unspecified sections of kerb are restricted (no parking) for everyone.
        *LikelyRestricted (2) - Unspecified sections of kerb are likely to be restricted (no parking) for everyone.
        *LikelyUnrestricted (3) - Unspecified sections of kerb are likely to be unrestricted (free parking)
        *Unknown (4) - We cannot say with confidence whether or not unspecified kerb sections are restricted.
      format: int32
    Geometry:
      type: object
      properties:
        type:
          type: string
          nullable: true
        crs:
          $ref: '#/components/schemas/Crs'
      additionalProperties: false
    GeometryCollection:
      type: object
      properties:
        type:
          type: string
          nullable: true
        crs:
          $ref: '#/components/schemas/Crs'
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/Geometry'
          nullable: true
      additionalProperties: false
    GeometryCollectionFeatureInfoFeature:
      type: object
      properties:
        type:
          type: string
          nullable: true
        id:
          type: string
          nullable: true
        geometry:
          $ref: '#/components/schemas/GeometryCollection'
        properties:
          $ref: '#/components/schemas/FeatureInfo'
      additionalProperties: false
    GeometryCollectionFeatureInfoFeatureCollection:
      type: object
      properties:
        type:
          type: string
          nullable: true
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeometryCollectionFeatureInfoFeature'
          nullable: true
        properties:
          nullable: true
      additionalProperties: false
    GeometryPreference:
      type: object
      properties:
        basemap:
          $ref: '#/components/schemas/BasemapTranslation'
        geometryTypes:
          type: array
          items:
            $ref: '#/components/schemas/GeometryType'
          description: |+
            List of the types of geometries you want to receive for this basemap

            *POI (1) - Point of interest: A single point, will be of type "Point"
            *Kerb (2) - Single line along the kerbedge, will be of type "LineString"
            *Outline (3) - A complete representation of the parking area, will be of type "Polygon". Only available for Ordnance Survey base maps
          nullable: true
      additionalProperties: false
      description: Indicates the type of geometries you want to retrieve
    GeometrySuggestionFeature:
      type: object
      properties:
        type:
          type: string
          nullable: true
        id:
          type: string
          nullable: true
        geometry:
          $ref: '#/components/schemas/Geometry'
        properties:
          $ref: '#/components/schemas/Suggestion'
      additionalProperties: false
    GeometrySuggestionFeatureCollection:
      type: object
      properties:
        type:
          type: string
          nullable: true
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeometrySuggestionFeature'
          nullable: true
        properties:
          nullable: true
      additionalProperties: false
    GeometrySuggestionFeatureCollectionOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/GeometrySuggestionFeatureCollection'
      additionalProperties: false
    GeometryType:
      enum:
      - 1
      - 2
      - 3
      type: integer
      description: |+
        Different types of geometries that can be returned

        *POI (1) - Point of interest: A single point, will be of type "Point"
        *Kerb (2) - Single line along the kerbedge, will be of type "LineString"
        *Outline (3) - A complete representation of the parking area, will be of type "Polygon". Only available for Ordnance Survey base maps
      format: int32
    IndexDefinition:
      type: object
      properties:
        name:
          type: string
          nullable: true
        onStreetIndexName:
          type: string
          nullable: true
        offStreetIndexName:
          type: string
          nullable: true
      additionalProperties: false
    IndexDefinitionIReadOnlyCollectionOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          type: array
          items:
            $ref: '#/components/schemas/IndexDefinition'
          nullable: true
      additionalProperties: false
    LatLng:
      type: object
      properties:
        lat:
          type: number
          description: Latitude
          format: double
        lng:
          type: number
          description: Longitude
          format: double
      additionalProperties: false
      description: Models a latitude and longitude
    MapEntitiesResponse:
      type: object
      properties:
        parkingEntities:
          type: array
          items:
            $ref: '#/components/schemas/ParkingEntity'
          description: Parking entities returned from the query
          nullable: true
        zones:
          type: array
          items:
            $ref: '#/components/schemas/Zone'
          description: Zones returned from the query
          nullable: true
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/Authority'
          description: Authorities returned from the query
          nullable: true
      additionalProperties: false
      description: Response shape for a request for multiple Map Entities
    MapEntitiesResponseOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/MapEntitiesResponse'
      additionalProperties: false
    MapEntityType:
      enum:
      - 1
      - 2
      - 3
      - 4
      type: integer
      description: |+
        Enumeration for the different types of Map Entity - objects returned by the API that can be drawn on a map.

        *OnStreet (1) - An on-street parking area
        *Carpark (2) - An off-street parking facility (car park) including surface and multi-storey car parks.
        *Zone (3) - A zone is an area defined by the local authority that acts as a container for a set of On-Street and Car park entities.
        A zone may define common parking rules that are applicable generally across parts of the kerb (e.g. Single Yellow Lines) and may
        define rules parking entities that can be overridden by individual entities.
        *Authority (4) - Defines the area controlled by a particular local authority. Authorities may contain zones and may also contain parking entities directly.
      format: int32
    Note:
      type: object
      properties:
        message:
          type: string
          description: The text of the note
          nullable: true
      additionalProperties: false
      description: Models a note that can be attached to an entity
    NotFoundResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        message:
          type: string
          nullable: true
      additionalProperties: false
    OnStreetParking:
      type: object
      properties:
        entityId:
          type: string
          description: Unique identifier for this entity
          nullable: true
        name:
          type: string
          description: User-readable name for this entity
          nullable: true
        eTag:
          type: string
          description: |-
            ETag for the entity. The ETag is specific to each version of this entity and changes whenever the entity data changes. Clients can
            send the eTags of cached entities to the server when requesting data and the server can return only entities for which the current ETag does
            not match the requested tag - i.e. just those entities that have changed.
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        locationCode:
          type: string
          description: A unique code for each parking entity assigned by a payment provider and is their identifier for payment purposes
          nullable: true
        totalCapacity:
          type: integer
          description: How many vehicles can be parked at the parking entity. May be approximate (in the case of unmarked bays)
          format: int32
          nullable: true
        zoneId:
          type: string
          description: ID of the zone in which the parking entity resides
          nullable: true
        authorityId:
          type: string
          description: ID of the authority in which the parking entity resides
          nullable: true
        features:
          $ref: '#/components/schemas/GeometryCollectionFeatureInfoFeatureCollection'
        paymentMethodIds:
          type: array
          items:
            type: integer
            format: int32
          description: Payment methods supported at this on-street location.
          nullable: true
        entityType:
          $ref: '#/components/schemas/MapEntityType'
        onStreetParkingTypeIds:
          type: array
          items:
            $ref: '#/components/schemas/OnStreetParkingType'
          description: |+
            The types of road markings represented by this entity. This property is only present for On Street Parking entities.

            *StandardBay (1) - Standard bay (paid or free)
            *DisabledBay (2) - A bay requiring a disabled badge / permit during restricted hours
            *MotorcycleBay (3) - Designated motorcycle bay
            *ElectricBay (4) - A bay designated for electric vehicles only
            *CarClubBay (5) - A bay designated for Car Club members only during restricted hours
            *CoachBay (6) - A bay with space for a coach
            *LoadingBay (7) - A bay that allows Loading Only during restricted hours
            *TaxiBay (8) - Taxi bay
            *ResidentBay (9) - A bay designated for resident permit holders during restricted hours
            *SpecialBay (10) - A bay with special restrictions, e.g. RNLI, High Court or Ambulance bays
            *SingleYellowLine (11) - Single yellow line
            *DoubleYellowLine (12) - Double yellow line
            *SingleRedLine (13) - Single red line
            *DoubleRedLine (14) - Double red line
            *SingleYellowKerbMark (15) - Single yellow kerb marks
            *DoubleYellowKerbMark (16) - Double yellow kerb marks
            *KeepClearLine (17) - Keep Clear lines
            *DroppedKerbDriveway (18) - A dropped kerb driveway
            *None (-1)
          nullable: true
        facilityTypeIds:
          type: array
          items:
            type: integer
            format: int32
          description: Any special facilities available at this on-street location, e.g. charging points for EVs. This property is only present for On Street Parking entities.
          nullable: true
        venueId:
          type: string
          description: The venue id
          nullable: true
      additionalProperties: false
      description: Models an On-Street bay
    OnStreetParkingType:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      - 11
      - 12
      - 13
      - 14
      - 15
      - 16
      - 17
      - 18
      - -1
      type: integer
      description: |+
        Indicates the type of on an OnStreet bay.

        *StandardBay (1) - Standard bay (paid or free)
        *DisabledBay (2) - A bay requiring a disabled badge / permit during restricted hours
        *MotorcycleBay (3) - Designated motorcycle bay
        *ElectricBay (4) - A bay designated for electric vehicles only
        *CarClubBay (5) - A bay designated for Car Club members only during restricted hours
        *CoachBay (6) - A bay with space for a coach
        *LoadingBay (7) - A bay that allows Loading Only during restricted hours
        *TaxiBay (8) - Taxi bay
        *ResidentBay (9) - A bay designated for resident permit holders during restricted hours
        *SpecialBay (10) - A bay with special restrictions, e.g. RNLI, High Court or Ambulance bays
        *SingleYellowLine (11) - Single yellow line
        *DoubleYellowLine (12) - Double yellow line
        *SingleRedLine (13) - Single red line
        *DoubleRedLine (14) - Double red line
        *SingleYellowKerbMark (15) - Single yellow kerb marks
        *DoubleYellowKerbMark (16) - Double yellow kerb marks
        *KeepClearLine (17) - Keep Clear lines
        *DroppedKerbDriveway (18) - A dropped kerb driveway
        *None (-1)
      format: int32
    OpenPeriod:
      type: object
      properties:
        start:
          type: string
          description: |-
            The local time of the day that the period starts
            Returned in local time format: hh:mm:ss (eg: 19:20:30)
          example: 00:00:00
        end:
          type: string
          description: |-
            The local time of the day that the period ends
            Returned in local time format: hh:mm:ss (eg: 19:20:30)
          example: 00:00:00
        isFree:
          type: boolean
          description: Specify if it is free for the open period
          readOnly: true
          deprecated: true
        date:
          type: string
          description: |-
            The local date that the period belongs
            Returned in local format: YYYY-MM-DD (eg: 2021-01-01)
          example: 2020-01-20T00:00:00.0000000
        status:
          $ref: '#/components/schemas/OpenPeriodStatus'
      additionalProperties: false
    OpenPeriodStatus:
      enum:
      - 1
      - 2
      - 3
      type: integer
      description: |2+


        *Free (1)
        *Paid (2)
        *Mixed (3)
      format: int32
    OperatingHours:
      type: object
      properties:
        paymentMethodIds:
          type: array
          items:
            type: integer
            format: int32
          description: Payment method(s) for which these operating hours are valid
          nullable: true
        permittedContext:
          $ref: '#/components/schemas/VehicleOperatorContext'
        openPeriods:
          type: array
          items:
            $ref: '#/components/schemas/OpenPeriod'
          description: Open periods
          nullable: true
      additionalProperties: false
      description: Contextualized operating hours for an entity
    OperatingHoursRequirements:
      type: object
      properties:
        paymentMethodIds:
          type: array
          items:
            type: integer
            format: int32
          description: Payment method(s) for which these operating hours are valid
          nullable: true
        requirements:
          $ref: '#/components/schemas/VehicleOperatorRequirements'
        openPeriods:
          type: array
          items:
            $ref: '#/components/schemas/OpenPeriod'
          description: Operating hours
          nullable: true
      additionalProperties: false
      description: Operating hours requirements for an entity
    ParkingAllowed:
      enum:
      - 1
      - 2
      - 3
      type: integer
      description: |+
        Enum to indicate the different scenarios whereby parking may be allowed or denied.

        *FullSession (1) - Parking is allowed for the whole of the requested window
        *TruncatedSession (2) - Parking is allowed for part of the requested window only
        *NoParking (3) - Parking is not allowed.
      format: int32
    ParkingEntity:
      type: object
      properties:
        entityId:
          type: string
          description: Unique identifier for this entity
          nullable: true
        entityType:
          $ref: '#/components/schemas/MapEntityType'
        name:
          type: string
          description: User-readable name for this entity
          nullable: true
        eTag:
          type: string
          description: |-
            ETag for the entity. The ETag is specific to each version of this entity and changes whenever the entity data changes. Clients can
            send the eTags of cached entities to the server when requesting data and the server can return only entities for which the current ETag does
            not match the requested tag - i.e. just those entities that have changed.
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        locationCode:
          type: string
          description: A unique code for each parking entity assigned by a payment provider and is their identifier for payment purposes
          nullable: true
        totalCapacity:
          type: integer
          description: How many vehicles can be parked at the parking entity. May be approximate (in the case of unmarked bays)
          format: int32
          nullable: true
        zoneId:
          type: string
          description: ID of the zone in which the parking entity resides
          nullable: true
        authorityId:
          type: string
          description: ID of the authority in which the parking entity resides
          nullable: true
        features:
          $ref: '#/components/schemas/GeometryCollectionFeatureInfoFeatureCollection'
        paymentMethodIds:
          type: array
          items:
            type: integer
            format: int32
          description: Payment methods supported at this on-street location.
          nullable: true
        operator:
          $ref: '#/components/schemas/CarParkOperator'
        onStreetParkingTypeIds:
          type: array
          items:
            $ref: '#/components/schemas/OnStreetParkingType'
          description: |+
            The types of road markings represented by this entity. This property is only present for On Street Parking entities.

            *StandardBay (1) - Standard bay (paid or free)
            *DisabledBay (2) - A bay requiring a disabled badge / permit during restricted hours
            *MotorcycleBay (3) - Designated motorcycle bay
            *ElectricBay (4) - A bay designated for electric vehicles only
            *CarClubBay (5) - A bay designated for Car Club members only during restricted hours
            *CoachBay (6) - A bay with space for a coach
            *LoadingBay (7) - A bay that allows Loading Only during restricted hours
            *TaxiBay (8) - Taxi bay
            *ResidentBay (9) - A bay designated for resident permit holders during restricted hours
            *SpecialBay (10) - A bay with special restrictions, e.g. RNLI, High Court or Ambulance bays
            *SingleYellowLine (11) - Single yellow line
            *DoubleYellowLine (12) - Double yellow line
            *SingleRedLine (13) - Single red line
            *DoubleRedLine (14) - Double red line
            *SingleYellowKerbMark (15) - Single yellow kerb marks
            *DoubleYellowKerbMark (16) - Double yellow kerb marks
            *KeepClearLine (17) - Keep Clear lines
            *DroppedKerbDriveway (18) - A dropped kerb driveway
            *None (-1)
          nullable: true
        facilityTypeIds:
          type: array
          items:
            type: integer
            format: int32
          description: Any special facilities available at this on-street location, e.g. charging points for EVs. This property is only present for On Street Parking entities.
          nullable: true
        venueId:
          type: string
          description: The venue id
          nullable: true
      additionalProperties: false
      description: Base class for Map Entities that support parking, either on-street or car parks
    ParkingEntityEventDatesResult:
      type: object
      properties:
        entityId:
          type: string
          description: Identifier of the parking entity
          nullable: true
        entityType:
          $ref: '#/components/schemas/MapEntityType'
        entityETag:
          type: string
          description: |-
            The Etag of the current latest version of the Parking Entity referred to by this result. This allows
            clients to determine if they have the latest version of the parking entity in their local cache and only
            request the entity if it is missing.
          nullable: true
        timeZoneId:
          type: string
          description: 'Entity Timezone Id in IANA (TZDB) format (eg: Europe/London)'
          nullable: true
        eventDates:
          type: array
          items:
            type: string
            description: ISO-8601 date pattern
            example: 2020-01-20T00:00:00.0000000
          description: List of event dates for this parking entity.
          nullable: true
      additionalProperties: false
    ParkingEntityEventDatesResultOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/ParkingEntityEventDatesResult'
      additionalProperties: false
    ParkingEntityOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/ParkingEntity'
      additionalProperties: false
    ParkingEntityOperatingHoursResult:
      type: object
      properties:
        entityId:
          type: string
          description: Identifier of the parking entity
          nullable: true
        entityType:
          $ref: '#/components/schemas/MapEntityType'
        entityETag:
          type: string
          description: |-
            The Etag of the current latest version of the Parking Entity referred to by this result. This allows
            clients to determine if they have the latest version of the parking entity in their local cache and only
            request the entity if it is missing.
          nullable: true
        timeZoneId:
          type: string
          description: 'Entity Timezone Id in IANA (TZDB) format (eg: Europe/London)'
          nullable: true
        operatingHours:
          type: array
          items:
            $ref: '#/components/schemas/OperatingHours'
          description: |-
            List of operating hours for this parking entity. If the context of the search means that there are multiple operating hours returned,
            one list of operating hours will be generated for each payment methods, bay types and vehicle operator
            context for which they are valid.
          nullable: true
        notApplicableOperatingHours:
          type: array
          items:
            $ref: '#/components/schemas/OperatingHoursRequirements'
          description: Not applicable operation hours requirements
          nullable: true
        applicableOperatingHoursDetail:
          type: array
          items:
            $ref: '#/components/schemas/OperatingHoursRequirements'
          description: Applicable operation hours requirements details
          nullable: true
      additionalProperties: false
    ParkingEntityOperatingHoursResultOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/ParkingEntityOperatingHoursResult'
      additionalProperties: false
    ParkingEntitySearchResult:
      type: object
      properties:
        entityId:
          type: string
          description: Identifier of the parking entity
          nullable: true
        entityType:
          $ref: '#/components/schemas/MapEntityType'
        quotes:
          type: array
          items:
            $ref: '#/components/schemas/ParkingQuote'
          description: |-
            List of quotes for parking at this parking entity. If the context of the search means that there are multiple prices returned,
            one quote will be generated for each price and the quotes will be decorated with the payment methods, bay types and vehicle operator
            context for which they are valid. If parking is not allowed, no quotes are returned.
          nullable: true
        distance:
          type: number
          description: How far away the parking entity is, in meters. Distances are relative to the DistanceCalculationLocation if supplied in the query, otherwise they are relative to the centre of the viewport.
          format: double
          nullable: true
        parkingAllowed:
          $ref: '#/components/schemas/ParkingAllowed'
        entityETag:
          type: string
          description: |-
            The Etag of the current latest version of the Parking Entity referred to by this result. This allows
            clients to determine if they have the latest version of the parking entity in their local cache and only
            request the entity if it is missing.
          nullable: true
      additionalProperties: false
      description: Represents a single result returned from a search for Parking Entities.
    ParkingEntitySearchResultOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/ParkingEntitySearchResult'
      additionalProperties: false
    ParkingQuote:
      type: object
      properties:
        cost:
          type: number
          description: The total cost of parking given the context of the quote.
          format: float
        currency:
          type: string
          description: Currency of the value in the Cost field
          nullable: true
        minCost:
          type: number
          description: |-
            Minimum cost for parking. This is the minimum amount the user will pay for parking,
            regardless of when they leave the space.
          format: float
          nullable: true
        minStayUntil:
          type: string
          description: |-
            The amount of time that the vehicle operator is entitled to stay in the space if they pay the amount
            specified in the MinCost field, i.e. the minimum duration that must be paid for in order to park.
          format: date-time
          nullable: true
        canExtendUntil:
          type: string
          description: |-
            The maximum time until which the user can park. This value ignores the requested window and is the
            latest time the user is able to remain parked in the space if they were to extend their session
            beyond the requested window.
            Dates/times are returned in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
          nullable: true
        pricedUntil:
          type: string
          description: |-
            The maximum time until which the user can park for the price specified in the 'cost' field. The
            'cost' field is the cost for the requested time window, but that price may entitle the user to
            park longer than requested, in which case this field holds the time that the cost will entitle
            them to park.
            Dates/times are returned in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
          nullable: true
        noReturnUntil:
          type: string
          description: The 'no return until', i.e. the time after parking during which the user is not allowed to return to the bay.
          format: date-time
          nullable: true
        freeUntil:
          type: string
          description: "If it is free to park in the bay at the start of the requested time window, this returns the maximum time up to which\r\nthe user can park for free. If the bay is paid parking from the start of the window, FreeUntil will be null.\r\n            \r\nIf the bay is free 24/7, this value will be 7 days from start time, which is the maximum session length supported by the Appyway API."
          format: date-time
          nullable: true
        becomesFreeAt:
          type: string
          description: |-
            If the user has to pay to park at the start of the requested time window, this returns the first time at which
            the user can park for free. If the bay is free parking from the start of the window OR free parking is never available in the bay, BecomesFreeAt will be null.
          format: date-time
          nullable: true
        isFreeParking:
          type: boolean
          description: TRUE if parking is free, false if it is paid.
          readOnly: true
        paymentMethodIds:
          type: array
          items:
            type: integer
            format: int32
          description: Payment method(s) for which this quote is valid
          nullable: true
        permittedContext:
          $ref: '#/components/schemas/VehicleOperatorContext'
        rulesApplyUntil:
          type: string
          description: |-
            The date and time until the rules on which this quote is based apply.
            Dates/times are returned in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
          format: date-time
          nullable: true
        surcharge:
          $ref: '#/components/schemas/SurchargeDetails'
      additionalProperties: false
      description: A contextualized quote for a parking session, including related data such as No Return and Minimum Cost
    ParkingQuotesResponse:
      type: object
      properties:
        requestedStartTime:
          type: string
          description: This is the query start time after it has been normalized. This is what was used for the quote calculations.
          format: date-time
        requestedDuration:
          type: string
          description: This is the query end time after it has been normalized. This is what was used for the quote calculations.
          example: 3.17:25:30.5000000
        parking:
          type: array
          items:
            $ref: '#/components/schemas/ParkingEntitySearchResult'
          description: List of Parking Entities returned by the response
          nullable: true
      additionalProperties: false
    ParkingQuotesResponseOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/ParkingQuotesResponse'
      additionalProperties: false
    ParkingSearchResponse:
      type: object
      properties:
        requestedStartTime:
          type: string
          description: This is the query start time after it has been normalized. This is what was used for the quote calculations.
          format: date-time
        requestedDuration:
          type: string
          description: This is the query end time after it has been normalized. This is what was used for the quote calculations.
          example: 3.17:25:30.5000000
        parking:
          type: array
          items:
            $ref: '#/components/schemas/ParkingEntitySearchResult'
          description: List of Parking Entities returned by the response
          nullable: true
        generalOnstreetPolicy:
          $ref: '#/components/schemas/GeneralOnStreetPolicyType'
      additionalProperties: false
      description: Response shape for parking search requests
    ParkingSearchResponseOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/ParkingSearchResponse'
      additionalProperties: false
    PaymentProvider:
      type: object
      properties:
        name:
          type: string
          description: Provider name
          nullable: true
        cardPaymentsExternalUrl:
          type: string
          description: URL for taking payments (if online payments are supported)
          nullable: true
        paymentsTelephone:
          type: string
          description: Phone number for taking payments (if pay-by-phone is supported)
          nullable: true
      additionalProperties: false
      description: An organization that supports parking payments.
    PaymentProvidersResponse:
      type: object
      properties:
        paymentProviders:
          type: array
          items:
            $ref: '#/components/schemas/PaymentProvider'
          description: Payment providers returned from the query
          nullable: true
      additionalProperties: false
      description: Response containing a list of payment providers
    PaymentProvidersResponseOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/PaymentProvidersResponse'
      additionalProperties: false
    Permit:
      type: object
      properties:
        permitTypeId:
          type: integer
          description: The type of the permit
          format: int32
      additionalProperties: false
      description: A permit that can be held by a vehicle operator
    Polygon:
      type: object
      properties:
        type:
          type: string
          nullable: true
        crs:
          $ref: '#/components/schemas/Crs'
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: number
                format: double
          nullable: true
      additionalProperties: false
    RestrictedPeriodResult:
      type: object
      properties:
        entityId:
          type: string
          description: Identifier of the parking entity
          nullable: true
        entityType:
          $ref: '#/components/schemas/MapEntityType'
        authorityId:
          type: string
          nullable: true
        restrictedPeriods:
          type: array
          items:
            $ref: '#/components/schemas/DateTimeRange'
          nullable: true
        requestRestrictedDuration:
          type: string
          description: Duration in ISO format [-][d'.']hh':'mm':'ss['.'fffffff]
          example: 3.17:25:30.5000000
      additionalProperties: false
    RestrictedPeriodResultOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/RestrictedPeriodResult'
      additionalProperties: false
    StringStringIReadOnlyCollectionIDictionaryOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          nullable: true
      additionalProperties: false
    Suggestion:
      type: object
      properties:
        suggestionType:
          $ref: '#/components/schemas/SuggestionType'
        basemapTranslation:
          $ref: '#/components/schemas/BasemapTranslation'
      additionalProperties: false
      description: Indicates likelihood of available parking in the designated area on a basemap
    SuggestionType:
      enum:
      - 1
      - 2
      - 3
      - 4
      type: integer
      description: |2+


        *Restricted (1) - Unspecified sections of kerb are restricted (no parking) for everyone.
        *LikelyRestricted (2) - Unspecified sections of kerb are likely to be restricted (no parking) for everyone.
        *LikelyUnrestricted (3) - Unspecified sections of kerb are likely to be unrestricted (free parking)
        *Unknown (4) - We cannot say with confidence whether or not unspecified kerb sections are restricted.
      format: int32
    SurchargeCriteria:
      type: object
      properties:
        vehicleOperatorContext:
          $ref: '#/components/schemas/VehicleOperatorContext'
        maxVehicleManufactureYear:
          type: integer
          description: The latest year of manufacture of the vehicle for which the surcharge applies
          format: int32
          nullable: true
      additionalProperties: false
      description: The criteria for which a surcharge may be applied
    SurchargeDetails:
      type: object
      properties:
        value:
          type: number
          description: The amount of the surcharge
          format: float
        valueType:
          $ref: '#/components/schemas/SurchargeValueType'
        criteria:
          $ref: '#/components/schemas/SurchargeCriteria'
      additionalProperties: false
      description: |-
        Details of a surcharge that may be applied to a parking charge, including the amount of the surcharge
        and the criteria under which it is applied.
    SurchargeValueType:
      enum:
      - 1
      - 2
      type: integer
      description: |+
        Indicates how clients should interpret the value in a SurchargeDetails object - as a flat rate (absolute cost) or percentage of the original charge

        *FlatRate (1) - The value should be interpreted as an absolute amount
        *Percentage (2) - The value should be interpreted as a percentage of the original cost (before surcharge)
      format: int32
    VehicleOperatorContext:
      type: object
      properties:
        vehicleTypeId:
          type: integer
          description: Type of vehicle being operated. See the reference API for more information.
          format: int32
          nullable: true
        activityTypeId:
          type: integer
          description: Activity the operator is seeking to perform at the kerbside (parking, loading). See the reference API for more information.
          format: int32
          nullable: true
        fuelTypeId:
          type: integer
          description: Fuel type of the vehicle. See the reference API for more information.
          format: int32
          nullable: true
        permits:
          type: array
          items:
            $ref: '#/components/schemas/Permit'
          description: Any permits types held by the operator (e.g. blue disabled badge, car club permit). See the reference API for more information.
          nullable: true
      additionalProperties: false
      description: |-
        A set of values that pertain to the driver looking to park (their vehicle, permits, intended activity)
        that affect whether or not they can park and/or the price they pay if they do.
    VehicleOperatorRequirements:
      type: object
      properties:
        vehicleTypeIds:
          type: array
          items:
            type: integer
            format: int32
          description: Vehicles types. See the reference API for more information.
          nullable: true
        activityTypeIds:
          type: array
          items:
            type: integer
            format: int32
          description: Activity the operators perform at the kerbside (parking, loading). See the reference API for more information.
          nullable: true
        fuelTypeIds:
          type: array
          items:
            type: integer
            format: int32
          description: Fuel types of the vehicles. See the reference API for more information.
          nullable: true
        permits:
          type: array
          items:
            $ref: '#/components/schemas/Permit'
          description: Any permits held by the operator (e.g. blue disabled badge, car club permit). See the reference API for more information.
          nullable: true
      additionalProperties: false
    Zone:
      type: object
      properties:
        entityId:
          type: string
          description: Unique identifier for this entity
          nullable: true
        name:
          type: string
          description: User-readable name for this entity
          nullable: true
        eTag:
          type: string
          description: |-
            ETag for the entity. The ETag is specific to each version of this entity and changes whenever the entity data changes. Clients can
            send the eTags of cached entities to the server when requesting data and the server can return only entities for which the current ETag does
            not match the requested tag - i.e. just those entities that have changed.
          nullable: true
        geometry:
          $ref: '#/components/schemas/GeometryCollection'
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: Any special note associated with this zone
          nullable: true
        authorityId:
          type: string
          description: The authority containing this zone
          nullable: true
        zoneType:
          $ref: '#/components/schemas/ZoneType'
        venueId:
          type: string
          description: The venue id
          nullable: true
        entityType:
          $ref: '#/components/schemas/MapEntityType'
      additionalProperties: false
      description: |-
        A zone is an area defined by the local authority that acts as a container for a set of OnStreet and CarPark entities.
        A zone may define common parking rules that are applicable generally across parts of the kerb (e.g. Single Yellow Lines) and may
        define rules parking entities that can be overridden by individual entities.
    ZoneDefault:
      type: object
      properties:
        onStreetParkingTypeId:
          $ref: '#/components/schemas/OnStreetParkingType'
        specialRestrictionTypeId:
          type: integer
          description: If special restrictions apply to this bay (OnStreetParkingTypeId is SpecialBay (10)) then this field will indicate the type of the special restrictions. NULL otherwise.
          format: int32
          nullable: true
        applicableTimes:
          type: array
          items:
            $ref: '#/components/schemas/ZoneDefaultApplicableTime'
          description: "All the time windows for which this zone default applies which intersect the requested period. \r\nAny window that applies for at least part of the requested period will be returned."
          nullable: true
        notApplicableTimes:
          type: array
          items:
            $ref: '#/components/schemas/ZoneDefaultNotApplicableTime'
          description: All the time windows for which this zone default not applies and intersect the requested period.
          nullable: true
      additionalProperties: false
      description: A default zone-wide setting that applies to all parking entities of the given bay type unless overridden specifically at the Parking Entity level
    ZoneDefaultApplicableTime:
      type: object
      properties:
        startTime:
          type: string
          description: The time and date that the window starts
          format: date-time
        endTime:
          type: string
          description: The time and date that the window ends
          format: date-time
        maxStay:
          type: integer
          description: The maximum stay policy that applies during this time window. NULL if there is no maximum stay.
          format: int32
          nullable: true
      additionalProperties: false
      description: Represents a window of time during which a zone default applies.
    ZoneDefaultNotApplicableTime:
      type: object
      properties:
        startTime:
          type: string
          description: The time and date that the window starts
          format: date-time
        endTime:
          type: string
          description: The time and date that the window ends
          format: date-time
      additionalProperties: false
      description: Represents a window of time during which a zone default do not applies.
    ZoneDefaultRulesResult:
      type: object
      properties:
        entityId:
          type: string
          description: Entity ID of the zone referred to by this result
          nullable: true
        entityETag:
          type: string
          description: |-
            The Etag of the current latest version of the Zone referred to by this result. This allows
            clients to determine if they have the latest version of the zone in their local cache and only
            request the entity if it is missing.
          nullable: true
        defaults:
          type: array
          items:
            $ref: '#/components/schemas/ZoneDefault'
          description: List of defaults for this zone
          nullable: true
      additionalProperties: false
    ZoneDefaultRulesResultOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/ZoneDefaultRulesResult'
      additionalProperties: false
    ZoneOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/Zone'
      additionalProperties: false
    ZoneSearchResponse:
      type: object
      properties:
        zones:
          type: array
          items:
            $ref: '#/components/schemas/ZoneSearchResult'
          description: List of search results returned in this response
          nullable: true
        zoneContainingLocation:
          $ref: '#/components/schemas/ZoneSearchResult'
      additionalProperties: false
      description: Response shape for zone search requests
    ZoneSearchResponseOkResponse:
      type: object
      properties:
        success:
          type: boolean
          readOnly: true
        result:
          $ref: '#/components/schemas/ZoneSearchResponse'
      additionalProperties: false
    ZoneSearchResult:
      type: object
      properties:
        entityId:
          type: string
          description: Entity ID of the zone referred to by this result
          nullable: true
        entityETag:
          type: string
          description: |-
            The Etag of the current latest version of the Zone referred to by this result. This allows
            clients to determine if they have the latest version of the zone in their local cache and only
            request the entity if it is missing.
          nullable: true
        defaults:
          type: array
          items:
            $ref: '#/components/schemas/ZoneDefault'
          description: List of defaults for this zone
          nullable: true
        distance:
          type: number
          description: |-
            How far away the zone is, in meters. Distances are relative to the DistanceCalculationLocation if supplied in the query, otherwise they are relative to the centre of the viewport.
            If the DistanceCalculationLocation / viewport centre is inside the zone, this value will be zero. Otherwise it will be the direct distance to the nearest point on the zone boundary.
          format: double
          nullable: true
      additionalProperties: false
      description: Represents a single result returned from a search for zones
    ZoneType:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 7
      - 8
      - 9
      - 10
      type: integer
      description: "Different types of Zone\n\n*ControlledParkingZone (1) - An ordinary zone in which authority-defined restrictions are in place.\r\n*RestrictedParkingZone (2) - A zone in which parking is never allowed.\r\n*FreeParking (3) - A zone in which parking is always allowed.\r\n*Private (4) - A region not under authority control (such as a shopping centre).\r\n*CongestionCharge (5) - A region in which congestion charges apply.\r\n*Container (7) - A zone that exists to contain On Street Parking entities that don't really belong in a zone.\r\n*ResidentsParkingScheme (8) - A zone in which a resident's permit parking scheme applies\r\n*PermitParkingArea (9) - Area of residential streets where parking is reserved for permit holders Gn++n++ a sign at the entrance to the street will show that parking is for permit holders only. \r\nPPAs may not have signs or bay markings within them. Sometimes there may be small plates to remind motorists of the controls in place\r\n*PedestrianZone (10) - Pedestrian area where no parking is allowed\r\n"
      format: int32
  securitySchemes:
    apiKey:
      name: API-KEY
      in: header
      type: apiKey
    oAuth2:
      flows:
        authorizationCode:
          scopes: {}
          authorizationUrl: https://auth.appyway.com/authorize
          tokenUrl: https://auth.appyway.com/oauth/token
      type: oauth2
  responses:
    TooManyRequests:
      description: Too many requests
    Unauthorized:
      description: Unauthorized
    Forbidden:
      description: Forbidden
security:
- apiKey: []
- oAuth2: []

