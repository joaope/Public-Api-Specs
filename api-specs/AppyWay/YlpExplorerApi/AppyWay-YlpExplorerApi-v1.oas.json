{
  "openapi": "3.0.1",
  "info": {
    "title": "Explorer API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.appyway.com/v1/explorer"
    }
  ],
  "paths": {
    "/fetchAuthorityById": {
      "post": {
        "tags": [
          "Authorities"
        ],
        "summary": "Fetch an authority by ID",
        "description": "Returns a specific authority by its ID",
        "operationId": "post-fetchauthoritybyid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchAuthorityByIdQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchAuthorityByIdQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FetchAuthorityByIdQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorityOkResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/fetchEntitiesByIds": {
      "post": {
        "tags": [
          "Bulk"
        ],
        "summary": "Fetches entities by their IDs",
        "description": "Retrieve a bulk list of entities of different types by their IDs",
        "operationId": "post-fetchentitiesbyids",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchEntitiesByIdsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchEntitiesByIdsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FetchEntitiesByIdsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapEntitiesResponseOkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/fetchParkingEntityById": {
      "post": {
        "tags": [
          "Parking"
        ],
        "summary": "Fetch a parking Entity by ID",
        "description": "Retrieves a parking entity by its ID",
        "operationId": "post-fetchparkingentitybyid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchParkingEntityByIdQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchParkingEntityByIdQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FetchParkingEntityByIdQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingEntityOkResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/fetchParkingQuoteById": {
      "post": {
        "tags": [
          "Parking"
        ],
        "summary": "Fetch a parking quote by id",
        "description": "Searches for a parking result with the supplied ID. Result indicates whether parking is allowed at the location.\r\nIf parking is allowed for all or part of the requested window, \r\nthe result contains a list of quotes containing information such as price, payment methods, maximum stay and no return policy.",
        "operationId": "post-fetchparkingquotebyid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchParkingQuoteByIdQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchParkingQuoteByIdQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FetchParkingQuoteByIdQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingEntitySearchResultOkResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/fetchParkingQuotesByIds": {
      "post": {
        "tags": [
          "Parking"
        ],
        "summary": "Fetch parking quotes by ids",
        "description": "Searches for a parking result with the supplied IDs. Result indicates whether parking is allowed at the location.\r\nIf parking is allowed for all or part of the requested window, \r\nthe result contains a list of quotes containing information such as price, payment methods, maximum stay and no return policy.",
        "operationId": "post-fetchparkingquotesbyids",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchParkingQuotesByIdsQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchParkingQuotesByIdsQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FetchParkingQuotesByIdsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingQuotesResponseOkResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/fetchPaymentProvidersByParkingEntityId": {
      "post": {
        "tags": [
          "Parking"
        ],
        "summary": "Fetch payment providers by parking entity ID",
        "description": "Returns payment providers for the given parking entity ID",
        "operationId": "post-fetchpaymentprovidersbyparkingentityid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchPaymentProvidersByParkingEntityIdQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchPaymentProvidersByParkingEntityIdQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FetchPaymentProvidersByParkingEntityIdQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentProvidersResponseOkResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/fetchZoneById": {
      "post": {
        "tags": [
          "Zones"
        ],
        "summary": "Fetch a zone By ID",
        "description": "Returns a specific zone by its ID",
        "operationId": "post-fetchzonebyid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchZoneByIdQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FetchZoneByIdQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FetchZoneByIdQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneOkResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/findAuthorityIdsByViewport": {
      "post": {
        "tags": [
          "Authorities"
        ],
        "summary": "Find Authority Ids by viewport",
        "description": "Returns the Ids of authorities that are at least partially within the specified GeoJson viewport.",
        "operationId": "post-findauthorityidsbyviewport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindAuthorityIdsByViewportQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FindAuthorityIdsByViewportQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FindAuthorityIdsByViewportQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneSearchResponseOkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/findParkingEntitiesByCentreAndViewportSize": {
      "post": {
        "tags": [
          "Parking"
        ],
        "summary": "Find parking entities by centre and viewport size",
        "description": "This query creates a square viewport with the centre at ViewportCentre and side length of ViewportSize.\r\nIt then returns a list of all the parking entities within the bounds of that polygon, along with their distance from the DistanceCalculationLocation if supplied,\r\nor the viewport centre if not. Entities are ordered by this distance.",
        "operationId": "post-findparkingentitiesbycentreandviewportsize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindParkingEntitiesByCentreAndViewportSizeQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FindParkingEntitiesByCentreAndViewportSizeQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FindParkingEntitiesByCentreAndViewportSizeQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindParkingEntitiesByViewportResponseOkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/findParkingEntitiesByViewport": {
      "post": {
        "tags": [
          "Parking"
        ],
        "summary": "Find Parking entities by viewport",
        "description": "This query creates a custom viewport from the supplied GeoJson polygon.\r\nIt then returns a list of all the parking entities within the bounds of that polygon, along with their distance from the DistanceCalculationLocation if supplied,\r\nor the viewport centre if not. Entities are ordered by this distance.",
        "operationId": "post-findparkingentitiesbyviewport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindParkingEntitiesByViewportQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FindParkingEntitiesByViewportQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FindParkingEntitiesByViewportQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindParkingEntitiesByViewportResponseOkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/findParkingQuotesByCentreAndViewportSize": {
      "post": {
        "tags": [
          "Parking"
        ],
        "summary": "Find parking quotes by centre and viewport size",
        "description": "This query creates a square viewport with the centre at ViewportCentre and side length of ViewportSize.\r\nIt then returns a list of search results for all parking entities within the bounds of that polygon.\r\nResults are ordered by proximity to the DistanceCalculationLocation if supplied, or the viewport centre if not.\r\n            \r\nEach result indicates whether parking is allowed at that location. If parking is allowed for all or part of the requested window, \r\nthe result contains a list of quotes containing information such as price, payment methods, maximum stay and no return policy.",
        "operationId": "post-findparkingquotesbycentreandviewportsize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindParkingQuotesByCentreAndViewportSizeQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FindParkingQuotesByCentreAndViewportSizeQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FindParkingQuotesByCentreAndViewportSizeQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingSearchResponseOkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/findParkingQuotesByViewport": {
      "post": {
        "tags": [
          "Parking"
        ],
        "summary": "Find Parking quotes by viewport",
        "description": "This query creates a custom viewport from the supplied GeoJson polygon.\r\nIt then returns a list of search results for all parking entities within the bounds of that polygon.\r\nResults are ordered by proximity to the DistanceCalculationLocation if supplied, or the viewport centre if not.\r\n            \r\nEach result indicates whether parking is allowed at that location. If parking is allowed for all or part of the requested window, \r\nthe result contains a list of quotes containing information such as price, payment methods, maximum stay and no return policy.",
        "operationId": "post-findparkingquotesbyviewport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindParkingQuotesByViewportQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FindParkingQuotesByViewportQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FindParkingQuotesByViewportQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingSearchResponseOkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/findSuggestionsByViewport": {
      "post": {
        "tags": [
          "Suggestions"
        ],
        "summary": "Find suggestions by Viewport",
        "description": "Returns information about areas not covered by parking entities. The results are indicative of the probability whether you can or cannot park in that area.\r\nAttention must be paid to the on street signage",
        "operationId": "post-findsuggestionsbyviewport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindSuggestionsByViewportQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FindSuggestionsByViewportQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FindSuggestionsByViewportQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeometrySuggestionFeatureCollectionOkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/findZoneDefaultRulesByViewport": {
      "post": {
        "tags": [
          "Zones"
        ],
        "summary": "Find Zone Default Rules by Viewport",
        "description": "Returns default rules for parking entities for zones that are at least partially within the specified GeoJson viewport.",
        "operationId": "post-findzonedefaultrulesbyviewport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindZoneDefaultRulesByViewportQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FindZoneDefaultRulesByViewportQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FindZoneDefaultRulesByViewportQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneSearchResponseOkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/monitor": {
      "get": {
        "tags": [
          "Monitor"
        ],
        "summary": "Monitor",
        "description": "Returns information on the health of the Explorer API service",
        "operationId": "get-monitor",
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "FetchAuthorityByIdQuery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the Authority to fetch",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Note": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The text of the note",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Models a note that can be attached to an entity"
      },
      "PaymentProvider": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Provider name",
            "nullable": true
          },
          "cardPaymentsExternalUrl": {
            "type": "string",
            "description": "URL for taking payments (if online payments are supported)",
            "nullable": true
          },
          "paymentsTelephone": {
            "type": "string",
            "description": "Phone number for taking payments (if pay-by-phone is supported)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An organization that supports parking payments."
      },
      "MapEntityType": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "Enumeration for the different types of Map Entity - objects returned by the API that can be drawn on a map.\n\n*OnStreet (1) - An on street parking area\r\n*Carpark (2) - An off-street parking facility (car park) including surface and multi-storey car parks.\r\n*Zone (3) - A zone is an area defined by the local authority that acts as a container for a set of OnStreet and Carpark entities.\r\nA zone may define common parking rules that are applicable generally across parts of the kerb (e.g. Single Yellow Lines) and may\r\ndefine rules parking entities that can be overridden by individual entities.\r\n*Authority (4) - Defines the area controlled by a particular local authority. Authorities may contain zones and may also contain parking entities directly.\r\n",
        "format": "int32"
      },
      "CrsProperties": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Crs": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "properties": {
            "$ref": "#/components/schemas/CrsProperties"
          }
        },
        "additionalProperties": false
      },
      "Geometry": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "crs": {
            "$ref": "#/components/schemas/Crs"
          }
        },
        "additionalProperties": false
      },
      "GeometryCollection": {
        "type": "object",
        "properties": {
          "geometries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Geometry"
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "crs": {
            "$ref": "#/components/schemas/Crs"
          }
        },
        "additionalProperties": false
      },
      "Authority": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            },
            "description": "Any special notes associated with this authority",
            "nullable": true
          },
          "paymentProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentProvider"
            },
            "nullable": true
          },
          "entityType": {
            "$ref": "#/components/schemas/MapEntityType"
          },
          "geometry": {
            "$ref": "#/components/schemas/GeometryCollection"
          },
          "hasFreeParkingOutsideZone": {
            "type": "boolean",
            "description": "This flag gives an indication of whether parking is likely to be available outside of designated\r\ncontrolled parking zones. The flag indicates the availability of parking for sections of the kerb where\r\nthis API does NOT return a specific OnStreetParking result. If TRUE, parking is likely to be free and\r\nunrestricted where the Parking Search results do not indicate otherwise. if FALSE, it is likely to be no parking.\r\n            \r\nThis is an indication only, and clients should inform their end users that they should always check local\r\nsignage when parking.\r\n            \r\nIf NULL, it is not known whether parking is available for this authority outside of designated zones.\r\n            \r\nNOTE that inside controlled parking zones, it is likely that parking is not available in areas where no\r\nOnStreetParking result is returned.",
            "nullable": true
          },
          "entityId": {
            "type": "string",
            "description": "Unique identifer for this entity",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "User-readable name for this entity",
            "nullable": true
          },
          "eTag": {
            "type": "string",
            "description": "ETag for the entity. The ETag is specific to each version of this entity and changes whenever the entity data changes. Clients can\r\nsend the eTags of cached entities to the server when requesting data and the server can return only entities for which the current ETag does\r\nnot match the requested tag - i.e. just those entities that have changed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines the area controlled by a particular local authority. Authorities may contain zones and may also contain parking entities directly."
      },
      "AuthorityOkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the response was successful",
            "readOnly": true
          },
          "result": {
            "$ref": "#/components/schemas/Authority"
          }
        },
        "additionalProperties": false,
        "description": "A successful response"
      },
      "NotFoundResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the request was successful",
            "readOnly": true,
            "example": false
          },
          "message": {
            "type": "string",
            "description": "Human-readable message for this response",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A response indicating the requested resource was not found"
      },
      "Polygon": {
        "type": "object",
        "properties": {
          "coordinates": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "crs": {
            "$ref": "#/components/schemas/Crs"
          }
        },
        "additionalProperties": false
      },
      "FindAuthorityIdsByViewportQuery": {
        "required": [
          "viewport"
        ],
        "type": "object",
        "properties": {
          "viewport": {
            "$ref": "#/components/schemas/Polygon"
          }
        },
        "additionalProperties": false,
        "description": "A request to search for zone default information by viewport"
      },
      "ZoneDefaultApplicableTime": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "The time and date that the window starts",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The time and date that the window ends",
            "format": "date-time"
          },
          "maxStay": {
            "type": "integer",
            "description": "The maximum stay policy that applies during this time window. NULL if there is no maximum stay.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a window of time during which a zone default applies."
      },
      "ZoneDefault": {
        "type": "object",
        "properties": {
          "onStreetParkingTypeId": {
            "type": "integer",
            "description": "Type of on street parking (standard bays, single yellow lines etc) to which these defaults apply",
            "format": "int32",
            "nullable": true
          },
          "specialRestrictionTypeId": {
            "type": "integer",
            "description": "If special restrictions apply to this bay (OnStreetParkingTypeId is SpecialBay (10)) then this field will indicate the type of the special restrictions. NULL otherwise.",
            "format": "int32",
            "nullable": true
          },
          "applicableTimes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneDefaultApplicableTime"
            },
            "description": "All the time windows for which this zone default applies which intersect the requested period. \r\nAny window that applies for at least part of the requested period will be returned.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A default zone-wide setting that applies to all parking entities of the given bay type unless overridden specifically at the Parking Entity level"
      },
      "ZoneSearchResult": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string",
            "description": "Entity ID of the zone referred to by this result",
            "nullable": true
          },
          "entityETag": {
            "type": "string",
            "description": "The Etag of the current latest version of the Zone referred to by this result. This allows\r\nclients to determine if they have the latest version of the zone in their local cache and only\r\nrequest the entity if it is missing.",
            "nullable": true
          },
          "defaults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneDefault"
            },
            "description": "List of defaults for this zone",
            "nullable": true
          },
          "distance": {
            "type": "number",
            "description": "How far away the zone is, in meters. Distances are relative to the DistanceCalculationLocation if supplied in the query, otherwise they are relative to the centre of the viewport.\r\nIf the DistanceCalculationLocation / viewport centre is inside the zone, this value will be zero. Otherwise it will be the direct distance to the nearest point on the zone boundary.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a single result returned from a search for zones"
      },
      "ZoneSearchResponse": {
        "type": "object",
        "properties": {
          "zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneSearchResult"
            },
            "description": "List of search results returned in this response",
            "nullable": true
          },
          "zoneContainingLocation": {
            "$ref": "#/components/schemas/ZoneSearchResult"
          }
        },
        "additionalProperties": false,
        "description": "Response shape for zone search requests"
      },
      "ZoneSearchResponseOkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the response was successful",
            "readOnly": true
          },
          "result": {
            "$ref": "#/components/schemas/ZoneSearchResponse"
          }
        },
        "additionalProperties": false,
        "description": "A successful response"
      },
      "Error": {
        "type": "object",
        "properties": {
          "property": {
            "type": "string",
            "description": "The property that caused the problem",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Machine-readable code representing the type of error",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Human-readable message for the error",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a validation error"
      },
      "BadRequestResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the request was successful",
            "readOnly": true,
            "example": false
          },
          "message": {
            "type": "string",
            "description": "Human-readable message for this response",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "description": "Collection of validation errors caused by the request",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A response indicating the request was invalid"
      },
      "BasemapTranslation": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "GeometryType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Different types of geometries that can be returned\n\n*POI (1) - Point of interest: A single point, will be of type \"Point\"\r\n*Kerb (2) - Single line along the kerbedge, will be of type \"LineString\"\r\n*Outline (3) - A complete representation of the parking area, will be of type \"Polygon\". Only available for Ordnance Survey base maps\r\n",
        "format": "int32"
      },
      "GeometryPreference": {
        "type": "object",
        "properties": {
          "basemap": {
            "$ref": "#/components/schemas/BasemapTranslation"
          },
          "geometryTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeometryType"
            },
            "description": "List of the types of geometries you want to receive for this basemap",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Indicates the type of geometries you want to retrieve"
      },
      "FetchEntitiesByIdsQuery": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of Ids of entities to fetch",
            "nullable": true
          },
          "geometryPreference": {
            "$ref": "#/components/schemas/GeometryPreference"
          }
        },
        "additionalProperties": false,
        "description": "Request allowing a client to fetch a list of entities"
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "description": "Street address",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "Town or city",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country",
            "nullable": true
          },
          "postcode": {
            "type": "string",
            "description": "Postal code",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A standard address for an Onstreet bay or Car park"
      },
      "FeatureInfo": {
        "type": "object",
        "properties": {
          "basemap": {
            "$ref": "#/components/schemas/BasemapTranslation"
          }
        },
        "additionalProperties": false,
        "description": "Provides information about the geometry contained in the feature"
      },
      "GeometryCollectionFeatureInfoFeature": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/FeatureInfo"
          },
          "geometry": {
            "$ref": "#/components/schemas/GeometryCollection"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeometryCollectionFeatureInfoFeatureCollection": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeometryCollectionFeatureInfoFeature"
            },
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ParkingEntity": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "locationCode": {
            "type": "string",
            "description": "A unique code for each parking entity assigned by a payment provider and is their identifier for payment purposes",
            "nullable": true
          },
          "totalCapacity": {
            "type": "integer",
            "description": "How many vehicles can be parked at the parking entity. May be approximate (in the case of unmarked bays)",
            "format": "int32",
            "nullable": true
          },
          "zoneId": {
            "type": "string",
            "description": "ID of the zone in which the parking entity resides",
            "nullable": true
          },
          "authorityId": {
            "type": "string",
            "description": "ID of the authority in which the parking entity resides",
            "nullable": true
          },
          "features": {
            "$ref": "#/components/schemas/GeometryCollectionFeatureInfoFeatureCollection"
          },
          "paymentMethodIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Payment methods supported at this onstreet location.",
            "nullable": true
          },
          "entityId": {
            "type": "string",
            "description": "Unique identifer for this entity",
            "nullable": true
          },
          "entityType": {
            "$ref": "#/components/schemas/MapEntityType"
          },
          "name": {
            "type": "string",
            "description": "User-readable name for this entity",
            "nullable": true
          },
          "eTag": {
            "type": "string",
            "description": "ETag for the entity. The ETag is specific to each version of this entity and changes whenever the entity data changes. Clients can\r\nsend the eTags of cached entities to the server when requesting data and the server can return only entities for which the current ETag does\r\nnot match the requested tag - i.e. just those entities that have changed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Base class for Map Entities that support parking, either onstreet or car parks"
      },
      "ZoneType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          7,
          8,
          9,
          10
        ],
        "type": "integer",
        "description": "Different types of Zone\n\n*ControlledParkingZone (1) - An ordinary zone in which authority-defined restrictions are in place.\r\n*RestrictedParkingZone (2) - A zone in which parking is never allowed.\r\n*FreeParking (3) - A zone in which parking is always allowed.\r\n*Private (4) - A region not under authority control (such as a shopping centre).\r\n*CongestionCharge (5) - A region in which congestion charges apply.\r\n*Container (7) - A zone that exists to contain On Street Parking entities that don't really belong in a zone.\r\n*ResidentsParkingScheme (8) - A zone in which a resident's permit parking scheme applies\r\n*PermitParkingArea (9) - Area of residential streets where parking is reserved for permit holders Gn++n++ a sign at the entrance to the street will show that parking is for permit holders only. \r\nPPAs may not have signs or bay markings within them. Sometimes there may be small plates to remind motorists of the controls in place\r\n*PedestrianZone (10) - Pedestrian area where no parking is allowed\r\n",
        "format": "int32"
      },
      "Zone": {
        "type": "object",
        "properties": {
          "geometry": {
            "$ref": "#/components/schemas/GeometryCollection"
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            },
            "description": "Any special note associated with this zone",
            "nullable": true
          },
          "authorityId": {
            "type": "string",
            "description": "The authority containing this zone",
            "nullable": true
          },
          "zoneType": {
            "$ref": "#/components/schemas/ZoneType"
          },
          "entityType": {
            "$ref": "#/components/schemas/MapEntityType"
          },
          "entityId": {
            "type": "string",
            "description": "Unique identifer for this entity",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "User-readable name for this entity",
            "nullable": true
          },
          "eTag": {
            "type": "string",
            "description": "ETag for the entity. The ETag is specific to each version of this entity and changes whenever the entity data changes. Clients can\r\nsend the eTags of cached entities to the server when requesting data and the server can return only entities for which the current ETag does\r\nnot match the requested tag - i.e. just those entities that have changed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A zone is an area defined by the local authority that acts as a container for a set of OnStreet and Carpark entities.\r\nA zone may define common parking rules that are applicable generally across parts of the kerb (e.g. Single Yellow Lines) and may\r\ndefine rules parking entities that can be overridden by individual entities."
      },
      "MapEntitiesResponse": {
        "type": "object",
        "properties": {
          "parkingEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParkingEntity"
            },
            "description": "Parking entities returned from the query",
            "nullable": true
          },
          "zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Zone"
            },
            "description": "Zones returned from the query",
            "nullable": true
          },
          "authorities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authority"
            },
            "description": "Authorities returned from the query",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response shape for a request for multiple Map Entities"
      },
      "MapEntitiesResponseOkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the response was successful",
            "readOnly": true
          },
          "result": {
            "$ref": "#/components/schemas/MapEntitiesResponse"
          }
        },
        "additionalProperties": false,
        "description": "A successful response"
      },
      "FetchParkingEntityByIdQuery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the Parking Entity to fetch",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ParkingEntityOkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the response was successful",
            "readOnly": true
          },
          "result": {
            "$ref": "#/components/schemas/ParkingEntity"
          }
        },
        "additionalProperties": false,
        "description": "A successful response"
      },
      "FetchPaymentProvidersByParkingEntityIdQuery": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentProvidersResponse": {
        "type": "object",
        "properties": {
          "paymentProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentProvider"
            },
            "description": "Payment providers returned from the query",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response containing a list of payment providers"
      },
      "PaymentProvidersResponseOkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the response was successful",
            "readOnly": true
          },
          "result": {
            "$ref": "#/components/schemas/PaymentProvidersResponse"
          }
        },
        "additionalProperties": false,
        "description": "A successful response"
      },
      "LatLng": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "Latitude",
            "format": "double"
          },
          "lng": {
            "type": "number",
            "description": "Longitude",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Models a latitude and longitude"
      },
      "FindParkingEntitiesByViewportFilters": {
        "type": "object",
        "properties": {
          "excludeEntityTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapEntityType"
            },
            "description": "If supplied, entities that have the given Map Entity types will be excluded from the response. Passing Zone or Authority\r\nentity types will result in a Bad Request response.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Filters that a caller can apply to limit the results returned when searching for parking entities by viewport"
      },
      "FindParkingEntitiesByCentreAndViewportSizeQuery": {
        "required": [
          "viewportCenter",
          "viewportSize"
        ],
        "type": "object",
        "properties": {
          "viewportCenter": {
            "$ref": "#/components/schemas/LatLng"
          },
          "viewportSize": {
            "maximum": 750,
            "exclusiveMaximum": true,
            "minLength": 1,
            "type": "integer",
            "description": "Length of one side of the square viewport in meters. Required.",
            "format": "int32"
          },
          "filters": {
            "$ref": "#/components/schemas/FindParkingEntitiesByViewportFilters"
          },
          "distanceCalculationLocation": {
            "$ref": "#/components/schemas/LatLng"
          },
          "geometryPreference": {
            "$ref": "#/components/schemas/GeometryPreference"
          },
          "onStreetParkingTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "If supplied, only on street parking entities that have the given On Street Parking types will be included in the response. If null,\r\nall types will be returned.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for searching for Parking Entities for a square viewport. The viewport is defined by the latitude and longitude of\r\nthe centre point and the length of one side."
      },
      "FindParkingEntitiesByViewportResult": {
        "type": "object",
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/ParkingEntity"
          },
          "distance": {
            "type": "number",
            "description": "How far away the parking entity is, in meters. Distances are relative to the DistanceCalculationLocation if supplied in the query, otherwise they are relative to the centre of the viewport.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Models a single result from a Search Parking Entities by Viewport call"
      },
      "FindParkingEntitiesByViewportResponse": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FindParkingEntitiesByViewportResult"
            },
            "description": "List of results from the entity search.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from calls that search for Parking Entities by viewport"
      },
      "FindParkingEntitiesByViewportResponseOkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the response was successful",
            "readOnly": true
          },
          "result": {
            "$ref": "#/components/schemas/FindParkingEntitiesByViewportResponse"
          }
        },
        "additionalProperties": false,
        "description": "A successful response"
      },
      "FindParkingEntitiesByViewportQuery": {
        "required": [
          "viewport"
        ],
        "type": "object",
        "properties": {
          "viewport": {
            "$ref": "#/components/schemas/Polygon"
          },
          "filters": {
            "$ref": "#/components/schemas/FindParkingEntitiesByViewportFilters"
          },
          "distanceCalculationLocation": {
            "$ref": "#/components/schemas/LatLng"
          },
          "geometryPreference": {
            "$ref": "#/components/schemas/GeometryPreference"
          },
          "onStreetParkingTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "If supplied, only on street parking entities that have the given On Street Parking types will be included in the response. If null,\r\nall types will be returned.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for searching for Parking Entities for a square viewport. The viewport is defined by the latitude and longitude of\r\nthe centre point and the length of one side."
      },
      "FindParkingQuotesByViewportFilters": {
        "type": "object",
        "properties": {
          "excludeEntityTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapEntityType"
            },
            "description": "If supplied, entities that have the given Map Entity types will be excluded from the response. Passing Zone or Authority\r\nentity types will result in a Bad Request response.",
            "nullable": true
          },
          "excludePaidParking": {
            "type": "boolean",
            "description": "TRUE to exclude paid parking bays from the result. Optional. Defaults to FALSE if omitted.",
            "nullable": true
          },
          "excludeFreeParking": {
            "type": "boolean",
            "description": "TRUE to exclude free parking bays from the result. Optional. Defaults to FALSE if omitted.",
            "nullable": true
          },
          "excludeNoParking": {
            "type": "boolean",
            "description": "TRUE to exclude from the result any bays where parking is not allowed for the entirety of the requested time window for the given vehicle operator. Optional. Defaults to FALSE if omitted.",
            "nullable": true
          },
          "excludeTruncatedParking": {
            "type": "boolean",
            "description": "TRUE to exclude from the result any bays where parking is not allowed for part of the requested time window for the given vehicle operator. Optional. Defaults to FALSE if omitted.\r\n            \r\nNote that this filter does not imply the exclusion of bays where parking is not allowed for the entirety of the requested time window. To exclude such results, use the ExcludeNoParking filter.\r\nif using ExcludeTruncatedParking.",
            "nullable": true
          },
          "excludeCostGreaterThan": {
            "type": "number",
            "description": "If supplied, bays for which the total cost over the requested duration exceeds the supplied value will not be included in the result.\r\n            \r\nIf the ExcludePaidParking filter is set to TRUE, this property will have no effect.",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Filters that a caller can apply to limit the results returned when searching for parking by viewport"
      },
      "Permit": {
        "type": "object",
        "properties": {
          "permitTypeId": {
            "type": "integer",
            "description": "The type of the permit",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A permit that can be held by a vehicle operator"
      },
      "VehicleOperatorContext": {
        "type": "object",
        "properties": {
          "vehicleTypeId": {
            "type": "integer",
            "description": "Type of vehicle being operated",
            "format": "int32",
            "nullable": true
          },
          "activityTypeId": {
            "type": "integer",
            "description": "Activity the operator is seeking to perform at the kerbside (parking, loading)",
            "format": "int32",
            "nullable": true
          },
          "fuelTypeId": {
            "type": "integer",
            "description": "Fuel type of the vehicle",
            "format": "int32",
            "nullable": true
          },
          "permits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permit"
            },
            "description": "Any permits held by the operator (e.g. blue disabled badge, car club permit)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A set of values that pertain to the driver looking to park (their vehicle, permits, intended activity)\r\nthat affect whether or not they can park and/or the price they pay if they do."
      },
      "FindParkingQuotesByCentreAndViewportSizeQuery": {
        "required": [
          "endTime",
          "startTime",
          "viewportCenter",
          "viewportSize"
        ],
        "type": "object",
        "properties": {
          "viewportCenter": {
            "$ref": "#/components/schemas/LatLng"
          },
          "viewportSize": {
            "maximum": 750,
            "exclusiveMaximum": true,
            "minLength": 1,
            "type": "integer",
            "description": "Length of one side of the square viewport in meters. Required.",
            "format": "int32"
          },
          "startTime": {
            "minLength": 1,
            "type": "string",
            "description": "Start of the window for which to retrieve state. Required.\r\nDates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time"
          },
          "endTime": {
            "minLength": 1,
            "type": "string",
            "description": "End of the window for which to retrieve state. Required.\r\nDates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time"
          },
          "filters": {
            "$ref": "#/components/schemas/FindParkingQuotesByViewportFilters"
          },
          "distanceCalculationLocation": {
            "$ref": "#/components/schemas/LatLng"
          },
          "vehicleOperatorContext": {
            "$ref": "#/components/schemas/VehicleOperatorContext"
          }
        },
        "additionalProperties": false,
        "description": "Request for searching for Parking Quotes for a square viewport. The viewport is defined by the latitude and longitude of\r\nthe centre point and the length of one side."
      },
      "GeneralOnStreetPolicyType": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "The different policies that may apply to sections of the kerb within a given area where no specific data is present.\n\n*Restricted (1) - Unspecified sections of kerb are restricted (no parking) for everyone.\r\n*LikelyRestricted (2) - Unspecified sections of kerb are likely to be restricted (no parking) for everyone.\r\n*LikelyUnrestricted (3) - Unspecified sections of kerb are likely to be unrestricted (free parking)\r\n*Unknown (4) - We cannot say with confidence whether or not unspecified kerb sections are restricted.\r\n",
        "format": "int32"
      },
      "SurchargeValueType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "Indicates how clients should interpret the value in a SurchargeDetails object - as a flat rate (absolute cost) or percentage of the original charge\n\n*FlatRate (1) - The value should be interpreted as an absolute amount\r\n*Percentage (2) - The value should be interpreted as a percentage of the original cost (before surcharge)\r\n",
        "format": "int32"
      },
      "SurchargeCriteria": {
        "type": "object",
        "properties": {
          "vehicleOperatorContext": {
            "$ref": "#/components/schemas/VehicleOperatorContext"
          },
          "maxVehicleManufactureYear": {
            "type": "integer",
            "description": "The latest year of manufacture of the vehicle for which the surcharge applies",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The criteria for which a surcharge may be applied"
      },
      "SurchargeDetails": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The amount of the surcharge",
            "format": "float"
          },
          "valueType": {
            "$ref": "#/components/schemas/SurchargeValueType"
          },
          "criteria": {
            "$ref": "#/components/schemas/SurchargeCriteria"
          }
        },
        "additionalProperties": false,
        "description": "Details of a surcharge that may be applied to a parking charge, including the amount of the surcharge\r\nand the criteria under which it is applied."
      },
      "ParkingQuote": {
        "type": "object",
        "properties": {
          "cost": {
            "type": "number",
            "description": "The total cost of parking given the context of the quote.",
            "format": "float"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the value in the Cost field",
            "nullable": true
          },
          "minCost": {
            "type": "number",
            "description": "Minimum cost for parking. This is the minimum amount the user will pay for parking,\r\nregardless of when they leave the space.",
            "format": "float",
            "nullable": true
          },
          "minStayUntil": {
            "type": "string",
            "description": "The amount of time that the vehicle operator is entitled to stay in the space if they pay the amount\r\nspecified in the MinCost field, i.e. the minimum duration that must be paid for in order to park.",
            "format": "date-time",
            "nullable": true
          },
          "canExtendUntil": {
            "type": "string",
            "description": "The maximum time until which the user can park. This value ignores the requested window and is the\r\nlatest time the user is able to remain parked in the space if they were to extend their session\r\nbeyond the requested window.\r\nDates/times are returned in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time",
            "nullable": true
          },
          "pricedUntil": {
            "type": "string",
            "description": "The maximum time until which the user can park for the price specified in the 'cost' field. The\r\n'cost' field is the cost for the requested time window, but that price may entitle the user to\r\npark longer than requested, in which case this field holds the time that the cost will entitle\r\nthem to park.\r\nDates/times are returned in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time",
            "nullable": true
          },
          "noReturnUntil": {
            "type": "string",
            "description": "The 'no return until', i.e. the time after parking during which the user is not allowed to return to the bay.",
            "format": "date-time",
            "nullable": true
          },
          "isFreeParking": {
            "type": "boolean",
            "description": "TRUE if parking is free, false if it is paid.",
            "readOnly": true
          },
          "paymentMethodIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Payment method(s) for which this quote is valid",
            "nullable": true
          },
          "permittedContext": {
            "$ref": "#/components/schemas/VehicleOperatorContext"
          },
          "rulesApplyUntil": {
            "type": "string",
            "description": "The date and time until the rules on which this quote is based apply.\r\nDates/times are returned in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time",
            "nullable": true
          },
          "surcharge": {
            "$ref": "#/components/schemas/SurchargeDetails"
          }
        },
        "additionalProperties": false,
        "description": "A contextualized quote for a parking session, including related data such as No Return and Minimum Cost"
      },
      "ParkingAllowed": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Enum to indicate the different scenarios whereby parking may be allowed or denied.\n\n*FullSession (1) - Parking is allowed for the whole of the requested window\r\n*TruncatedSession (2) - Parking is allowed for part of the requested window only\r\n*NoParking (3) - Parking is not allowed.\r\n",
        "format": "int32"
      },
      "NoParkingReasonType": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "Reasons that parking is not permitted at a parking entity\n\n*NoParkingAllowed (1) - Parking is never allowed at this location for anybody\r\n*IncorrectVehicleOperatorContext (2) - Parking is allowed during the requested window, but not for the vehicle operator making the request\r\n*SpecialRestrictionsApply (3) - The parking entity is subject to special restrictions that apply during the requested window\r\n*CarParkClosed (4) - A car park that is closed during the requested window\r\n",
        "format": "int32"
      },
      "NoParkingReason": {
        "type": "object",
        "properties": {
          "reasonType": {
            "$ref": "#/components/schemas/NoParkingReasonType"
          },
          "requiredContexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleOperatorContext"
            },
            "nullable": true
          },
          "specialRestrictions": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ParkingEntitySearchResult": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string",
            "description": "Identifier of the parking entity",
            "nullable": true
          },
          "entityType": {
            "$ref": "#/components/schemas/MapEntityType"
          },
          "quotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParkingQuote"
            },
            "description": "List of quotes for parking at this parking entity. If the context of the search means that there are multiple prices returned,\r\none quote will be generated for each price and the quotes will be decorated with the payment methods, bay types and vehicle operator\r\ncontext for which they are valid. If parking is not allowed, no quotes are returned.",
            "nullable": true
          },
          "distance": {
            "type": "number",
            "description": "How far away the parking entity is, in meters. Distances are relative to the DistanceCalculationLocation if supplied in the query, otherwise they are relative to the centre of the viewport.",
            "format": "double",
            "nullable": true
          },
          "parkingAllowed": {
            "$ref": "#/components/schemas/ParkingAllowed"
          },
          "noParkingReason": {
            "$ref": "#/components/schemas/NoParkingReason"
          },
          "entityETag": {
            "type": "string",
            "description": "The Etag of the current latest version of the Parking Entity referred to by this result. This allows\r\nclients to determine if they have the latest version of the parking entity in their local cache and only\r\nrequest the entity if it is missing.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a single result returned from a search for Parking Entities."
      },
      "ParkingSearchResponse": {
        "type": "object",
        "properties": {
          "generalOnstreetPolicy": {
            "$ref": "#/components/schemas/GeneralOnStreetPolicyType"
          },
          "requestedStartTime": {
            "type": "string",
            "description": "This is the query start time after it has been normalized. This is what was used for the quote calculations.",
            "format": "date-time"
          },
          "requestedDuration": {
            "type": "string",
            "description": "This is the query end time after it has been normalized. This is what was used for the quote calculations.",
            "example": "3.17:25:30.5000000"
          },
          "parking": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParkingEntitySearchResult"
            },
            "description": "List of Parking Entities returned by the response",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response shape for parking search requests"
      },
      "ParkingSearchResponseOkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the response was successful",
            "readOnly": true
          },
          "result": {
            "$ref": "#/components/schemas/ParkingSearchResponse"
          }
        },
        "additionalProperties": false,
        "description": "A successful response"
      },
      "FindParkingQuotesByViewportQuery": {
        "required": [
          "endTime",
          "startTime",
          "viewport"
        ],
        "type": "object",
        "properties": {
          "viewport": {
            "$ref": "#/components/schemas/Polygon"
          },
          "startTime": {
            "minLength": 1,
            "type": "string",
            "description": "Start of the window for which to retrieve state. Required.\r\nDates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time"
          },
          "endTime": {
            "minLength": 1,
            "type": "string",
            "description": "End of the window for which to retrieve state. Required.\r\nDates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time"
          },
          "filters": {
            "$ref": "#/components/schemas/FindParkingQuotesByViewportFilters"
          },
          "distanceCalculationLocation": {
            "$ref": "#/components/schemas/LatLng"
          },
          "vehicleOperatorContext": {
            "$ref": "#/components/schemas/VehicleOperatorContext"
          }
        },
        "additionalProperties": false,
        "description": "Request for searching for Parking Quotes for a square viewport. The viewport is defined by the latitude and longitude of\r\nthe centre point and the length of one side."
      },
      "FetchParkingQuoteByIdQuery": {
        "required": [
          "endTime",
          "entityId",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "entityId": {
            "minLength": 1,
            "type": "string",
            "description": "Identifier of the Parking Entity to fetch",
            "nullable": true
          },
          "startTime": {
            "minLength": 1,
            "type": "string",
            "description": "Start of the window for which to retrieve state. Required.\r\nDates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time"
          },
          "endTime": {
            "minLength": 1,
            "type": "string",
            "description": "End of the window for which to retrieve state. Required.\r\nDates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time"
          },
          "vehicleOperatorContext": {
            "$ref": "#/components/schemas/VehicleOperatorContext"
          }
        },
        "additionalProperties": false
      },
      "ParkingEntitySearchResultOkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the response was successful",
            "readOnly": true
          },
          "result": {
            "$ref": "#/components/schemas/ParkingEntitySearchResult"
          }
        },
        "additionalProperties": false,
        "description": "A successful response"
      },
      "FetchParkingQuotesByIdsQuery": {
        "required": [
          "endTime",
          "ids",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "minLength": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of Ids of entities to fetch",
            "nullable": true
          },
          "startTime": {
            "minLength": 1,
            "type": "string",
            "description": "Start of the window for which to retrieve state. Required.\r\nDates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time"
          },
          "endTime": {
            "minLength": 1,
            "type": "string",
            "description": "End of the window for which to retrieve state. Required.\r\nDates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time"
          },
          "vehicleOperatorContext": {
            "$ref": "#/components/schemas/VehicleOperatorContext"
          }
        },
        "additionalProperties": false
      },
      "ParkingQuotesResponse": {
        "type": "object",
        "properties": {
          "requestedStartTime": {
            "type": "string",
            "description": "This is the query start time after it has been normalized. This is what was used for the quote calculations.",
            "format": "date-time"
          },
          "requestedDuration": {
            "type": "string",
            "description": "This is the query end time after it has been normalized. This is what was used for the quote calculations.",
            "example": "3.17:25:30.5000000"
          },
          "parking": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParkingEntitySearchResult"
            },
            "description": "List of Parking Entities returned by the response",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ParkingQuotesResponseOkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the response was successful",
            "readOnly": true
          },
          "result": {
            "$ref": "#/components/schemas/ParkingQuotesResponse"
          }
        },
        "additionalProperties": false,
        "description": "A successful response"
      },
      "FindSuggestionsByViewportQuery": {
        "type": "object",
        "properties": {
          "viewport": {
            "$ref": "#/components/schemas/Polygon"
          },
          "basemap": {
            "$ref": "#/components/schemas/BasemapTranslation"
          }
        },
        "additionalProperties": false
      },
      "SuggestionType": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "Suggestion": {
        "type": "object",
        "properties": {
          "suggestionType": {
            "$ref": "#/components/schemas/SuggestionType"
          },
          "baseMapTranslation": {
            "$ref": "#/components/schemas/BasemapTranslation"
          }
        },
        "additionalProperties": false,
        "description": "Indicates likelihood of available parking in the designated area on a basemap"
      },
      "GeometrySuggestionFeature": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/Suggestion"
          },
          "geometry": {
            "$ref": "#/components/schemas/Geometry"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeometrySuggestionFeatureCollection": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeometrySuggestionFeature"
            },
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeometrySuggestionFeatureCollectionOkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the response was successful",
            "readOnly": true
          },
          "result": {
            "$ref": "#/components/schemas/GeometrySuggestionFeatureCollection"
          }
        },
        "additionalProperties": false,
        "description": "A successful response"
      },
      "FetchZoneByIdQuery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the Zone to fetch",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ZoneOkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the response was successful",
            "readOnly": true
          },
          "result": {
            "$ref": "#/components/schemas/Zone"
          }
        },
        "additionalProperties": false,
        "description": "A successful response"
      },
      "FindZoneDefaultRulesByViewportQuery": {
        "required": [
          "endTime",
          "startTime",
          "viewport"
        ],
        "type": "object",
        "properties": {
          "viewport": {
            "$ref": "#/components/schemas/Polygon"
          },
          "startTime": {
            "minLength": 1,
            "type": "string",
            "description": "Start of the window for which to retrieve state. Required.\r\nDates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time"
          },
          "endTime": {
            "minLength": 1,
            "type": "string",
            "description": "End of the window for which to retrieve state. Required.\r\nDates/times should be provided in ISO8601 format: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)",
            "format": "date-time"
          },
          "onStreetParkingTypeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "On Street Parking types for which to return state. Optional. If omitted, defaults are returned for all the on street parking types\r\nin the zone for which they are defined.",
            "nullable": true
          },
          "distanceCalculationLocation": {
            "$ref": "#/components/schemas/LatLng"
          }
        },
        "additionalProperties": false,
        "description": "A request to search for zone default information by viewport"
      }
    },
    "securitySchemes": {
      "apiKey": {
        "name": "API-KEY",
        "in": "header",
        "type": "apiKey"
      },
      "oAuth2": {
        "flows": {
          "authorizationCode": {
            "scopes": {},
            "authorizationUrl": "https://auth.appyway.com/authorize",
            "tokenUrl": "https://auth.appyway.com/oauth/token"
          }
        },
        "type": "oauth2"
      }
    },
    "responses": {
      "TooManyRequests": {
        "description": "Too many requests"
      },
      "Unauthorized": {
        "description": "Unauthorized"
      },
      "Forbidden": {
        "description": "Forbidden"
      }
    }
  },
  "security": [
    {
      "apiKey": []
    },
    {
      "oAuth2": []
    }
  ]
}
