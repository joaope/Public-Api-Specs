openapi: 3.0.1
info:
  title: AppyParking Mock Api
  description: TODO
  version: "2.0"
  contact:
    email: support@appyway.com
    url: https://appyway.com/get-in-touch-support/
    name: AppyWay Support
servers:
- url: https://api.appyway.com/appyparkingmockapi/v2
paths:
  /api/v2/Orders:
    get:
      tags:
      - Orders
      summary: Retrieves all orders.
      description: Retrieves all orders.
      operationId: get-api-v2-orders
      responses:
        "200":
          description: The successfully retrieved orders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiV2OrdersGet200ApplicationJsonResponse'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
      - Orders
      summary: Places a new order.
      description: Places a new order.
      operationId: post-api-v2-orders
      requestBody:
        description: The order to place.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          text/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        "201":
          description: The order was successfully placed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: The order is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
  /api/v2/Orders/{id}:
    get:
      tags:
      - Orders
      summary: Gets a single order.
      description: Gets a single order.
      operationId: get-api-v2-orders-id
      parameters:
      - name: id
        in: path
        description: Format - int32. The requested order identifier.
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: The order was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "404":
          description: The order does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
  /api/v2/People:
    get:
      tags:
      - People
      summary: Gets all people.
      description: Gets all people.
      operationId: get-api-v2-people
      responses:
        "200":
          description: The successfully retrieved people.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiV2PeopleGet200ApplicationJsonResponse'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
  /api/v2/People/{id}:
    get:
      tags:
      - People
      summary: Gets a single person.
      description: Gets a single person.
      operationId: get-api-v2-people-id
      parameters:
      - name: id
        in: path
        description: Format - int32. The requested person identifier.
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: The person was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "404":
          description: The person does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
components:
  schemas:
    Order:
      required:
      - customer
      type: object
      properties:
        customer:
          type: string
          description: Gets or sets the name of the ordering customer.
        id:
          type: integer
          description: Gets or sets the unique identifier for the order.
          format: int32
        effectiveDate:
          type: string
          description: Gets or sets the date and time when the order becomes effective.
          format: date-time
        createdDate:
          type: string
          description: Gets or sets the date and time when the order was created.
          format: date-time
      additionalProperties: false
      description: Represents an order.
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties:
        type: object
        additionalProperties: false
    Person:
      required:
      - firstName
      - lastName
      type: object
      properties:
        lastName:
          maxLength: 25
          minLength: 0
          type: string
          description: Gets or sets the last name of a person.
        firstName:
          maxLength: 25
          minLength: 0
          type: string
          description: Gets or sets the first name of a person.
        email:
          type: string
          description: Gets or sets the email address for a person.
          nullable: true
        id:
          type: integer
          description: Gets or sets the unique identifier for a person.
          format: int32
      additionalProperties: false
      description: Represents a person.
    ApiV2OrdersGet200ApplicationJsonResponse:
      type: array
      items:
        $ref: '#/components/schemas/Order'
    ApiV2PeopleGet200ApplicationJsonResponse:
      type: array
      items:
        $ref: '#/components/schemas/Person'
  securitySchemes:
    apiKey:
      name: API-KEY
      in: header
      type: apiKey
    oAuth2:
      flows:
        authorizationCode:
          scopes: {}
          authorizationUrl: https://auth.appyway.com/authorize
          tokenUrl: https://auth.appyway.com/oauth/token
      type: oauth2
  responses:
    TooManyRequests:
      description: Too many requests
    Unauthorized:
      description: Unauthorized
    Forbidden:
      description: Forbidden
security:
- apiKey: []
- oAuth2: []

